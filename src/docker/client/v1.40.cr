#########################################################################
#     WARNING: this file was generated automatically, do not modify     #
#########################################################################

require "json"
require "uri"

module Docker
  alias GenericResources = Array(GenericResource)

  alias PortMap = Hash(String, Array(PortBinding))

  enum NodeState
    Unknown
    Down
    Ready
    Disconnected
  end

  enum Reachability
    Unknown
    Unreachable
    Reachable
  end

  enum TaskState
    New
    Allocated
    Pending
    Assigned
    Accepted
    Preparing
    Ready
    Starting
    Running
    Complete
    Shutdown
    Failed
    Rejected
    Remove
    Orphaned
  end

  enum LocalNodeState
    
    Inactive
    Pending
    Active
    Error
    Locked
  end

  class Address
    include JSON::Serializable

    @[JSON::Field(key: "Addr")]
    property! addr : String?

    @[JSON::Field(key: "PrefixLen")]
    property! prefix_len : Int64?

    def initialize(@addr : String? = nil, @prefix_len : Int64? = nil)
    end
  end

  class AuthConfig
    include JSON::Serializable

    @[JSON::Field(key: "username")]
    property! username : String?

    @[JSON::Field(key: "password")]
    property! password : String?

    @[JSON::Field(key: "email")]
    property! email : String?

    @[JSON::Field(key: "serveraddress")]
    property! serveraddress : String?

    def initialize(@username : String? = nil, @password : String? = nil, @email : String? = nil, @serveraddress : String? = nil)
    end
  end

  class BuildCache
    include JSON::Serializable

    @[JSON::Field(key: "ID")]
    property! id : String?

    @[JSON::Field(key: "Parent")]
    property! parent : String?

    @[JSON::Field(key: "Type")]
    property! type : String?

    @[JSON::Field(key: "Description")]
    property! description : String?

    @[JSON::Field(key: "InUse")]
    property! in_use : Bool?

    @[JSON::Field(key: "Shared")]
    property! shared : Bool?

    @[JSON::Field(key: "Size")]
    property! size : Int64?

    @[JSON::Field(key: "CreatedAt")]
    property! created_at : Time?

    @[JSON::Field(key: "LastUsedAt")]
    property! last_used_at : Time?

    @[JSON::Field(key: "UsageCount")]
    property! usage_count : Int64?

    def initialize(@id : String? = nil, @parent : String? = nil, @type : String? = nil, @description : String? = nil, @in_use : Bool? = nil, @shared : Bool? = nil, @size : Int64? = nil, @created_at : Time? = nil, @last_used_at : Time? = nil, @usage_count : Int64? = nil)
    end
  end

  class BuildInfo
    include JSON::Serializable

    @[JSON::Field(key: "id")]
    property! id : String?

    @[JSON::Field(key: "stream")]
    property! stream : String?

    @[JSON::Field(key: "error")]
    property! error : String?

    @[JSON::Field(key: "errorDetail")]
    property! error_detail : ErrorDetail?

    @[JSON::Field(key: "status")]
    property! status : String?

    @[JSON::Field(key: "progress")]
    property! progress : String?

    @[JSON::Field(key: "progressDetail")]
    property! progress_detail : ProgressDetail?

    @[JSON::Field(key: "aux")]
    property! aux : ImageID?

    def initialize(@id : String? = nil, @stream : String? = nil, @error : String? = nil, @error_detail : ErrorDetail? = nil, @status : String? = nil, @progress : String? = nil, @progress_detail : ProgressDetail? = nil, @aux : ImageID? = nil)
    end
  end

  class BuildPruneResponse
    include JSON::Serializable

    @[JSON::Field(key: "CachesDeleted")]
    property! caches_deleted : Array(String)?

    @[JSON::Field(key: "SpaceReclaimed")]
    property! space_reclaimed : Int64?

    def initialize(@caches_deleted : Array(String)? = nil, @space_reclaimed : Int64? = nil)
    end
  end

  class ClusterInfo
    include JSON::Serializable

    @[JSON::Field(key: "ID")]
    property! id : String?

    @[JSON::Field(key: "Version")]
    property! version : ObjectVersion?

    @[JSON::Field(key: "CreatedAt")]
    property! created_at : Time?

    @[JSON::Field(key: "UpdatedAt")]
    property! updated_at : Time?

    @[JSON::Field(key: "Spec")]
    property! spec : SwarmSpec?

    @[JSON::Field(key: "TLSInfo")]
    property! tls_info : TLSInfo?

    @[JSON::Field(key: "RootRotationInProgress")]
    property! root_rotation_in_progress : Bool?

    @[JSON::Field(key: "DataPathPort")]
    property! data_path_port : UInt32?

    @[JSON::Field(key: "DefaultAddrPool")]
    property! default_addr_pool : Array(String)?

    @[JSON::Field(key: "SubnetSize")]
    property! subnet_size : UInt32?

    def initialize(@id : String? = nil, @version : ObjectVersion? = nil, @created_at : Time? = nil, @updated_at : Time? = nil, @spec : SwarmSpec? = nil, @tls_info : TLSInfo? = nil, @root_rotation_in_progress : Bool? = nil, @data_path_port : UInt32? = nil, @default_addr_pool : Array(String)? = nil, @subnet_size : UInt32? = nil)
    end
  end

  class Commit
    include JSON::Serializable

    @[JSON::Field(key: "ID")]
    property! id : String?

    @[JSON::Field(key: "Expected")]
    property! expected : String?

    def initialize(@id : String? = nil, @expected : String? = nil)
    end
  end

  class Config
    include JSON::Serializable

    @[JSON::Field(key: "ID")]
    property! id : String?

    @[JSON::Field(key: "Version")]
    property! version : ObjectVersion?

    @[JSON::Field(key: "CreatedAt")]
    property! created_at : Time?

    @[JSON::Field(key: "UpdatedAt")]
    property! updated_at : Time?

    @[JSON::Field(key: "Spec")]
    property! spec : ConfigSpec?

    def initialize(@id : String? = nil, @version : ObjectVersion? = nil, @created_at : Time? = nil, @updated_at : Time? = nil, @spec : ConfigSpec? = nil)
    end
  end

  class ConfigCreate
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    @[JSON::Field(key: "Name")]
    property! name : String?

    @[JSON::Field(key: "Labels")]
    property! labels : Hash(String, String)?

    @[JSON::Field(key: "Data")]
    property! data : String?

    @[JSON::Field(key: "Templating")]
    property! templating : Driver?

    def initialize(@name : String? = nil, @labels : Hash(String, String)? = nil, @data : String? = nil, @templating : Driver? = nil)
    end
  end

  class ConfigSpec
    include JSON::Serializable

    @[JSON::Field(key: "Name")]
    property! name : String?

    @[JSON::Field(key: "Labels")]
    property! labels : Hash(String, String)?

    @[JSON::Field(key: "Data")]
    property! data : String?

    @[JSON::Field(key: "Templating")]
    property! templating : Driver?

    def initialize(@name : String? = nil, @labels : Hash(String, String)? = nil, @data : String? = nil, @templating : Driver? = nil)
    end
  end

  class ContainerChangeResponseItem
    include JSON::Serializable

    @[JSON::Field(key: "Path")]
    property! path : String

    @[JSON::Field(key: "Kind")]
    property! kind : UInt8

    def initialize(@path : String, @kind : UInt8)
    end
  end

  class ContainerConfig
    include JSON::Serializable

    @[JSON::Field(key: "Hostname")]
    property! hostname : String?

    @[JSON::Field(key: "Domainname")]
    property! domainname : String?

    @[JSON::Field(key: "User")]
    property! user : String?

    @[JSON::Field(key: "AttachStdin")]
    property! attach_stdin : Bool?

    @[JSON::Field(key: "AttachStdout")]
    property! attach_stdout : Bool?

    @[JSON::Field(key: "AttachStderr")]
    property! attach_stderr : Bool?

    @[JSON::Field(key: "ExposedPorts")]
    property! exposed_ports : Hash(String, JSON::Any)?

    @[JSON::Field(key: "Tty")]
    property! tty : Bool?

    @[JSON::Field(key: "OpenStdin")]
    property! open_stdin : Bool?

    @[JSON::Field(key: "StdinOnce")]
    property! stdin_once : Bool?

    @[JSON::Field(key: "Env")]
    property! env : Array(String)?

    @[JSON::Field(key: "Cmd")]
    property! cmd : Array(String)?

    @[JSON::Field(key: "Healthcheck")]
    property! healthcheck : HealthConfig?

    @[JSON::Field(key: "ArgsEscaped")]
    property! args_escaped : Bool?

    @[JSON::Field(key: "Image")]
    property! image : String?

    @[JSON::Field(key: "Volumes")]
    property! volumes : Hash(String, JSON::Any)?

    @[JSON::Field(key: "WorkingDir")]
    property! working_dir : String?

    @[JSON::Field(key: "Entrypoint")]
    property! entrypoint : Array(String)?

    @[JSON::Field(key: "NetworkDisabled")]
    property! network_disabled : Bool?

    @[JSON::Field(key: "MacAddress")]
    property! mac_address : String?

    @[JSON::Field(key: "OnBuild")]
    property! on_build : Array(String)?

    @[JSON::Field(key: "Labels")]
    property! labels : Hash(String, String)?

    @[JSON::Field(key: "StopSignal")]
    property! stop_signal : String?

    @[JSON::Field(key: "StopTimeout")]
    property! stop_timeout : Int64?

    @[JSON::Field(key: "Shell")]
    property! shell : Array(String)?

    def initialize(@hostname : String? = nil, @domainname : String? = nil, @user : String? = nil, @attach_stdin : Bool? = nil, @attach_stdout : Bool? = nil, @attach_stderr : Bool? = nil, @exposed_ports : Hash(String, JSON::Any)? = nil, @tty : Bool? = nil, @open_stdin : Bool? = nil, @stdin_once : Bool? = nil, @env : Array(String)? = nil, @cmd : Array(String)? = nil, @healthcheck : HealthConfig? = nil, @args_escaped : Bool? = nil, @image : String? = nil, @volumes : Hash(String, JSON::Any)? = nil, @working_dir : String? = nil, @entrypoint : Array(String)? = nil, @network_disabled : Bool? = nil, @mac_address : String? = nil, @on_build : Array(String)? = nil, @labels : Hash(String, String)? = nil, @stop_signal : String? = nil, @stop_timeout : Int64? = nil, @shell : Array(String)? = nil)
    end
  end

  class ContainerCreate
    include JSON::Serializable

    @[JSON::Field(key: "Hostname")]
    property! hostname : String?

    @[JSON::Field(key: "Domainname")]
    property! domainname : String?

    @[JSON::Field(key: "User")]
    property! user : String?

    @[JSON::Field(key: "AttachStdin")]
    property! attach_stdin : Bool?

    @[JSON::Field(key: "AttachStdout")]
    property! attach_stdout : Bool?

    @[JSON::Field(key: "AttachStderr")]
    property! attach_stderr : Bool?

    @[JSON::Field(key: "ExposedPorts")]
    property! exposed_ports : Hash(String, JSON::Any)?

    @[JSON::Field(key: "Tty")]
    property! tty : Bool?

    @[JSON::Field(key: "OpenStdin")]
    property! open_stdin : Bool?

    @[JSON::Field(key: "StdinOnce")]
    property! stdin_once : Bool?

    @[JSON::Field(key: "Env")]
    property! env : Array(String)?

    @[JSON::Field(key: "Cmd")]
    property! cmd : Array(String)?

    @[JSON::Field(key: "Healthcheck")]
    property! healthcheck : HealthConfig?

    @[JSON::Field(key: "ArgsEscaped")]
    property! args_escaped : Bool?

    @[JSON::Field(key: "Image")]
    property! image : String?

    @[JSON::Field(key: "Volumes")]
    property! volumes : Hash(String, JSON::Any)?

    @[JSON::Field(key: "WorkingDir")]
    property! working_dir : String?

    @[JSON::Field(key: "Entrypoint")]
    property! entrypoint : Array(String)?

    @[JSON::Field(key: "NetworkDisabled")]
    property! network_disabled : Bool?

    @[JSON::Field(key: "MacAddress")]
    property! mac_address : String?

    @[JSON::Field(key: "OnBuild")]
    property! on_build : Array(String)?

    @[JSON::Field(key: "Labels")]
    property! labels : Hash(String, String)?

    @[JSON::Field(key: "StopSignal")]
    property! stop_signal : String?

    @[JSON::Field(key: "StopTimeout")]
    property! stop_timeout : Int64?

    @[JSON::Field(key: "Shell")]
    property! shell : Array(String)?

    @[JSON::Field(key: "HostConfig")]
    property! host_config : HostConfig?

    @[JSON::Field(key: "NetworkingConfig")]
    property! networking_config : NetworkingConfig?

    def initialize(@hostname : String? = nil, @domainname : String? = nil, @user : String? = nil, @attach_stdin : Bool? = nil, @attach_stdout : Bool? = nil, @attach_stderr : Bool? = nil, @exposed_ports : Hash(String, JSON::Any)? = nil, @tty : Bool? = nil, @open_stdin : Bool? = nil, @stdin_once : Bool? = nil, @env : Array(String)? = nil, @cmd : Array(String)? = nil, @healthcheck : HealthConfig? = nil, @args_escaped : Bool? = nil, @image : String? = nil, @volumes : Hash(String, JSON::Any)? = nil, @working_dir : String? = nil, @entrypoint : Array(String)? = nil, @network_disabled : Bool? = nil, @mac_address : String? = nil, @on_build : Array(String)? = nil, @labels : Hash(String, String)? = nil, @stop_signal : String? = nil, @stop_timeout : Int64? = nil, @shell : Array(String)? = nil, @host_config : HostConfig? = nil, @networking_config : NetworkingConfig? = nil)
    end
  end

  class ContainerCreateResponse
    include JSON::Serializable

    @[JSON::Field(key: "Id")]
    property! id : String

    @[JSON::Field(key: "Warnings")]
    property! warnings : Array(String)

    def initialize(@id : String, @warnings : Array(String))
    end
  end

  class ContainerInspectResponse
    include JSON::Serializable

    @[JSON::Field(key: "Id")]
    property! id : String?

    @[JSON::Field(key: "Created")]
    property! created : String?

    @[JSON::Field(key: "Path")]
    property! path : String?

    @[JSON::Field(key: "Args")]
    property! args : Array(String)?

    @[JSON::Field(key: "State")]
    property! state : ContainerState?

    @[JSON::Field(key: "Image")]
    property! image : String?

    @[JSON::Field(key: "ResolvConfPath")]
    property! resolv_conf_path : String?

    @[JSON::Field(key: "HostnamePath")]
    property! hostname_path : String?

    @[JSON::Field(key: "HostsPath")]
    property! hosts_path : String?

    @[JSON::Field(key: "LogPath")]
    property! log_path : String?

    @[JSON::Field(key: "Name")]
    property! name : String?

    @[JSON::Field(key: "RestartCount")]
    property! restart_count : Int64?

    @[JSON::Field(key: "Driver")]
    property! driver : String?

    @[JSON::Field(key: "Platform")]
    property! platform : String?

    @[JSON::Field(key: "MountLabel")]
    property! mount_label : String?

    @[JSON::Field(key: "ProcessLabel")]
    property! process_label : String?

    @[JSON::Field(key: "AppArmorProfile")]
    property! app_armor_profile : String?

    @[JSON::Field(key: "ExecIDs")]
    property! exec_i_ds : Array(String)?

    @[JSON::Field(key: "HostConfig")]
    property! host_config : HostConfig?

    @[JSON::Field(key: "GraphDriver")]
    property! graph_driver : GraphDriverData?

    @[JSON::Field(key: "SizeRw")]
    property! size_rw : Int64?

    @[JSON::Field(key: "SizeRootFs")]
    property! size_root_fs : Int64?

    @[JSON::Field(key: "Mounts")]
    property! mounts : Array(MountPoint)?

    @[JSON::Field(key: "Config")]
    property! config : ContainerConfig?

    @[JSON::Field(key: "NetworkSettings")]
    property! network_settings : NetworkSettings?

    def initialize(@id : String? = nil, @created : String? = nil, @path : String? = nil, @args : Array(String)? = nil, @state : ContainerState? = nil, @image : String? = nil, @resolv_conf_path : String? = nil, @hostname_path : String? = nil, @hosts_path : String? = nil, @log_path : String? = nil, @name : String? = nil, @restart_count : Int64? = nil, @driver : String? = nil, @platform : String? = nil, @mount_label : String? = nil, @process_label : String? = nil, @app_armor_profile : String? = nil, @exec_i_ds : Array(String)? = nil, @host_config : HostConfig? = nil, @graph_driver : GraphDriverData? = nil, @size_rw : Int64? = nil, @size_root_fs : Int64? = nil, @mounts : Array(MountPoint)? = nil, @config : ContainerConfig? = nil, @network_settings : NetworkSettings? = nil)
    end
  end

  class ContainerPruneResponse
    include JSON::Serializable

    @[JSON::Field(key: "ContainersDeleted")]
    property! containers_deleted : Array(String)?

    @[JSON::Field(key: "SpaceReclaimed")]
    property! space_reclaimed : Int64?

    def initialize(@containers_deleted : Array(String)? = nil, @space_reclaimed : Int64? = nil)
    end
  end

  class ContainerState
    include JSON::Serializable

    @[JSON::Field(key: "Status")]
    property! status : String?

    @[JSON::Field(key: "Running")]
    property! running : Bool?

    @[JSON::Field(key: "Paused")]
    property! paused : Bool?

    @[JSON::Field(key: "Restarting")]
    property! restarting : Bool?

    @[JSON::Field(key: "OOMKilled")]
    property! oom_killed : Bool?

    @[JSON::Field(key: "Dead")]
    property! dead : Bool?

    @[JSON::Field(key: "Pid")]
    property! pid : Int64?

    @[JSON::Field(key: "ExitCode")]
    property! exit_code : Int64?

    @[JSON::Field(key: "Error")]
    property! error : String?

    @[JSON::Field(key: "StartedAt")]
    property! started_at : String?

    @[JSON::Field(key: "FinishedAt")]
    property! finished_at : String?

    @[JSON::Field(key: "Health")]
    property! health : Health?

    def initialize(@status : String? = nil, @running : Bool? = nil, @paused : Bool? = nil, @restarting : Bool? = nil, @oom_killed : Bool? = nil, @dead : Bool? = nil, @pid : Int64? = nil, @exit_code : Int64? = nil, @error : String? = nil, @started_at : String? = nil, @finished_at : String? = nil, @health : Health? = nil)
    end
  end

  class ContainerSummary
    include JSON::Serializable

    @[JSON::Field(key: "Id")]
    property! id : String?

    @[JSON::Field(key: "Names")]
    property! names : Array(String)?

    @[JSON::Field(key: "Image")]
    property! image : String?

    @[JSON::Field(key: "ImageID")]
    property! image_id : String?

    @[JSON::Field(key: "Command")]
    property! command : String?

    @[JSON::Field(key: "Created")]
    property! created : Int64?

    @[JSON::Field(key: "Ports")]
    property! ports : Array(Port)?

    @[JSON::Field(key: "SizeRw")]
    property! size_rw : Int64?

    @[JSON::Field(key: "SizeRootFs")]
    property! size_root_fs : Int64?

    @[JSON::Field(key: "Labels")]
    property! labels : Hash(String, String)?

    @[JSON::Field(key: "State")]
    property! state : String?

    @[JSON::Field(key: "Status")]
    property! status : String?

    @[JSON::Field(key: "HostConfig")]
    property! host_config : ContainerSummary::HostConfig?

    @[JSON::Field(key: "NetworkSettings")]
    property! network_settings : ContainerSummary::NetworkSettings?

    @[JSON::Field(key: "Mounts")]
    property! mounts : Array(MountPoint)?

    def initialize(@id : String? = nil, @names : Array(String)? = nil, @image : String? = nil, @image_id : String? = nil, @command : String? = nil, @created : Int64? = nil, @ports : Array(Port)? = nil, @size_rw : Int64? = nil, @size_root_fs : Int64? = nil, @labels : Hash(String, String)? = nil, @state : String? = nil, @status : String? = nil, @host_config : ContainerSummary::HostConfig? = nil, @network_settings : ContainerSummary::NetworkSettings? = nil, @mounts : Array(MountPoint)? = nil)
    end
  end

  class ContainerSummary::HostConfig
    include JSON::Serializable

    @[JSON::Field(key: "NetworkMode")]
    property! network_mode : String?

    def initialize(@network_mode : String? = nil)
    end
  end

  class ContainerSummary::NetworkSettings
    include JSON::Serializable

    @[JSON::Field(key: "Networks")]
    property! networks : Hash(String, EndpointSettings)?

    def initialize(@networks : Hash(String, EndpointSettings)? = nil)
    end
  end

  class ContainerTopResponse
    include JSON::Serializable

    @[JSON::Field(key: "Titles")]
    property! titles : Array(String)?

    @[JSON::Field(key: "Processes")]
    property! processes : Array(Array(String))?

    def initialize(@titles : Array(String)? = nil, @processes : Array(Array(String))? = nil)
    end
  end

  class ContainerUpdate
    include JSON::Serializable

    @[JSON::Field(key: "CpuShares")]
    property! cpu_shares : Int64?

    @[JSON::Field(key: "Memory")]
    property! memory : Int64?

    @[JSON::Field(key: "CgroupParent")]
    property! cgroup_parent : String?

    @[JSON::Field(key: "BlkioWeight")]
    property! blkio_weight : Int64?

    @[JSON::Field(key: "BlkioWeightDevice")]
    property! blkio_weight_device : Array(ContainerUpdate::BlkioWeightDevice)?

    @[JSON::Field(key: "BlkioDeviceReadBps")]
    property! blkio_device_read_bps : Array(ThrottleDevice)?

    @[JSON::Field(key: "BlkioDeviceWriteBps")]
    property! blkio_device_write_bps : Array(ThrottleDevice)?

    @[JSON::Field(key: "BlkioDeviceReadIOps")]
    property! blkio_device_read_i_ops : Array(ThrottleDevice)?

    @[JSON::Field(key: "BlkioDeviceWriteIOps")]
    property! blkio_device_write_i_ops : Array(ThrottleDevice)?

    @[JSON::Field(key: "CpuPeriod")]
    property! cpu_period : Int64?

    @[JSON::Field(key: "CpuQuota")]
    property! cpu_quota : Int64?

    @[JSON::Field(key: "CpuRealtimePeriod")]
    property! cpu_realtime_period : Int64?

    @[JSON::Field(key: "CpuRealtimeRuntime")]
    property! cpu_realtime_runtime : Int64?

    @[JSON::Field(key: "CpusetCpus")]
    property! cpuset_cpus : String?

    @[JSON::Field(key: "CpusetMems")]
    property! cpuset_mems : String?

    @[JSON::Field(key: "Devices")]
    property! devices : Array(DeviceMapping)?

    @[JSON::Field(key: "DeviceCgroupRules")]
    property! device_cgroup_rules : Array(String)?

    @[JSON::Field(key: "DeviceRequests")]
    property! device_requests : Array(DeviceRequest)?

    @[JSON::Field(key: "KernelMemory")]
    property! kernel_memory : Int64?

    @[JSON::Field(key: "KernelMemoryTCP")]
    property! kernel_memory_tcp : Int64?

    @[JSON::Field(key: "MemoryReservation")]
    property! memory_reservation : Int64?

    @[JSON::Field(key: "MemorySwap")]
    property! memory_swap : Int64?

    @[JSON::Field(key: "MemorySwappiness")]
    property! memory_swappiness : Int64?

    @[JSON::Field(key: "NanoCpus")]
    property! nano_cpus : Int64?

    @[JSON::Field(key: "OomKillDisable")]
    property! oom_kill_disable : Bool?

    @[JSON::Field(key: "Init")]
    property! init : Bool?

    @[JSON::Field(key: "PidsLimit")]
    property! pids_limit : Int64?

    @[JSON::Field(key: "Ulimits")]
    property! ulimits : Array(ContainerUpdate::Ulimits)?

    @[JSON::Field(key: "CpuCount")]
    property! cpu_count : Int64?

    @[JSON::Field(key: "CpuPercent")]
    property! cpu_percent : Int64?

    @[JSON::Field(key: "IOMaximumIOps")]
    property! io_maximum_i_ops : Int64?

    @[JSON::Field(key: "IOMaximumBandwidth")]
    property! io_maximum_bandwidth : Int64?

    @[JSON::Field(key: "RestartPolicy")]
    property! restart_policy : RestartPolicy?

    def initialize(@cpu_shares : Int64? = nil, @memory : Int64? = nil, @cgroup_parent : String? = nil, @blkio_weight : Int64? = nil, @blkio_weight_device : Array(ContainerUpdate::BlkioWeightDevice)? = nil, @blkio_device_read_bps : Array(ThrottleDevice)? = nil, @blkio_device_write_bps : Array(ThrottleDevice)? = nil, @blkio_device_read_i_ops : Array(ThrottleDevice)? = nil, @blkio_device_write_i_ops : Array(ThrottleDevice)? = nil, @cpu_period : Int64? = nil, @cpu_quota : Int64? = nil, @cpu_realtime_period : Int64? = nil, @cpu_realtime_runtime : Int64? = nil, @cpuset_cpus : String? = nil, @cpuset_mems : String? = nil, @devices : Array(DeviceMapping)? = nil, @device_cgroup_rules : Array(String)? = nil, @device_requests : Array(DeviceRequest)? = nil, @kernel_memory : Int64? = nil, @kernel_memory_tcp : Int64? = nil, @memory_reservation : Int64? = nil, @memory_swap : Int64? = nil, @memory_swappiness : Int64? = nil, @nano_cpus : Int64? = nil, @oom_kill_disable : Bool? = nil, @init : Bool? = nil, @pids_limit : Int64? = nil, @ulimits : Array(ContainerUpdate::Ulimits)? = nil, @cpu_count : Int64? = nil, @cpu_percent : Int64? = nil, @io_maximum_i_ops : Int64? = nil, @io_maximum_bandwidth : Int64? = nil, @restart_policy : RestartPolicy? = nil)
    end
  end

  class ContainerUpdate::BlkioWeightDevice
    include JSON::Serializable

    @[JSON::Field(key: "Path")]
    property! path : String?

    @[JSON::Field(key: "Weight")]
    property! weight : Int64?

    def initialize(@path : String? = nil, @weight : Int64? = nil)
    end
  end

  class ContainerUpdate::Ulimits
    include JSON::Serializable

    @[JSON::Field(key: "Name")]
    property! name : String?

    @[JSON::Field(key: "Soft")]
    property! soft : Int64?

    @[JSON::Field(key: "Hard")]
    property! hard : Int64?

    def initialize(@name : String? = nil, @soft : Int64? = nil, @hard : Int64? = nil)
    end
  end

  class ContainerUpdateResponse
    include JSON::Serializable

    @[JSON::Field(key: "Warnings")]
    property! warnings : Array(String)?

    def initialize(@warnings : Array(String)? = nil)
    end
  end

  class ContainerWaitExitError
    include JSON::Serializable

    @[JSON::Field(key: "Message")]
    property! message : String?

    def initialize(@message : String? = nil)
    end
  end

  class ContainerWaitResponse
    include JSON::Serializable

    @[JSON::Field(key: "StatusCode")]
    property! status_code : Int64

    @[JSON::Field(key: "Error")]
    property! error : ContainerWaitExitError?

    def initialize(@status_code : Int64, @error : ContainerWaitExitError? = nil)
    end
  end

  class CreateImageInfo
    include JSON::Serializable

    @[JSON::Field(key: "id")]
    property! id : String?

    @[JSON::Field(key: "error")]
    property! error : String?

    @[JSON::Field(key: "errorDetail")]
    property! error_detail : ErrorDetail?

    @[JSON::Field(key: "status")]
    property! status : String?

    @[JSON::Field(key: "progress")]
    property! progress : String?

    @[JSON::Field(key: "progressDetail")]
    property! progress_detail : ProgressDetail?

    def initialize(@id : String? = nil, @error : String? = nil, @error_detail : ErrorDetail? = nil, @status : String? = nil, @progress : String? = nil, @progress_detail : ProgressDetail? = nil)
    end
  end

  class DeviceMapping
    include JSON::Serializable

    @[JSON::Field(key: "PathOnHost")]
    property! path_on_host : String?

    @[JSON::Field(key: "PathInContainer")]
    property! path_in_container : String?

    @[JSON::Field(key: "CgroupPermissions")]
    property! cgroup_permissions : String?

    def initialize(@path_on_host : String? = nil, @path_in_container : String? = nil, @cgroup_permissions : String? = nil)
    end
  end

  class DeviceRequest
    include JSON::Serializable

    @[JSON::Field(key: "Driver")]
    property! driver : String?

    @[JSON::Field(key: "Count")]
    property! count : Int64?

    @[JSON::Field(key: "DeviceIDs")]
    property! device_i_ds : Array(String)?

    @[JSON::Field(key: "Capabilities")]
    property! capabilities : Array(Array(String))?

    @[JSON::Field(key: "Options")]
    property! options : Hash(String, String)?

    def initialize(@driver : String? = nil, @count : Int64? = nil, @device_i_ds : Array(String)? = nil, @capabilities : Array(Array(String))? = nil, @options : Hash(String, String)? = nil)
    end
  end

  class DistributionInspect
    include JSON::Serializable

    @[JSON::Field(key: "Descriptor")]
    property! descriptor : OCIDescriptor

    @[JSON::Field(key: "Platforms")]
    property! platforms : Array(OCIPlatform)

    def initialize(@descriptor : OCIDescriptor, @platforms : Array(OCIPlatform))
    end
  end

  class Driver
    include JSON::Serializable

    @[JSON::Field(key: "Name")]
    property! name : String

    @[JSON::Field(key: "Options")]
    property! options : Hash(String, String)

    def initialize(@name : String, @options : Hash(String, String))
    end
  end

  class EndpointIPAMConfig
    include JSON::Serializable

    @[JSON::Field(key: "IPv4Address")]
    property! ipv4_address : String?

    @[JSON::Field(key: "IPv6Address")]
    property! ipv6_address : String?

    @[JSON::Field(key: "LinkLocalIPs")]
    property! link_local_ips : Array(String)?

    def initialize(@ipv4_address : String? = nil, @ipv6_address : String? = nil, @link_local_ips : Array(String)? = nil)
    end
  end

  class EndpointPortConfig
    include JSON::Serializable

    @[JSON::Field(key: "Name")]
    property! name : String?

    @[JSON::Field(key: "Protocol")]
    property! protocol : String?

    @[JSON::Field(key: "TargetPort")]
    property! target_port : Int64?

    @[JSON::Field(key: "PublishedPort")]
    property! published_port : Int64?

    @[JSON::Field(key: "PublishMode")]
    property! publish_mode : String?

    def initialize(@name : String? = nil, @protocol : String? = nil, @target_port : Int64? = nil, @published_port : Int64? = nil, @publish_mode : String? = nil)
    end
  end

  class EndpointSettings
    include JSON::Serializable

    @[JSON::Field(key: "IPAMConfig")]
    property! ipam_config : EndpointIPAMConfig?

    @[JSON::Field(key: "Links")]
    property! links : Array(String)?

    @[JSON::Field(key: "Aliases")]
    property! aliases : Array(String)?

    @[JSON::Field(key: "NetworkID")]
    property! network_id : String?

    @[JSON::Field(key: "EndpointID")]
    property! endpoint_id : String?

    @[JSON::Field(key: "Gateway")]
    property! gateway : String?

    @[JSON::Field(key: "IPAddress")]
    property! ip_address : String?

    @[JSON::Field(key: "IPPrefixLen")]
    property! ip_prefix_len : Int64?

    @[JSON::Field(key: "IPv6Gateway")]
    property! ipv6_gateway : String?

    @[JSON::Field(key: "GlobalIPv6Address")]
    property! global_ipv6_address : String?

    @[JSON::Field(key: "GlobalIPv6PrefixLen")]
    property! global_ipv6_prefix_len : Int64?

    @[JSON::Field(key: "MacAddress")]
    property! mac_address : String?

    @[JSON::Field(key: "DriverOpts")]
    property! driver_opts : Hash(String, String)?

    def initialize(@ipam_config : EndpointIPAMConfig? = nil, @links : Array(String)? = nil, @aliases : Array(String)? = nil, @network_id : String? = nil, @endpoint_id : String? = nil, @gateway : String? = nil, @ip_address : String? = nil, @ip_prefix_len : Int64? = nil, @ipv6_gateway : String? = nil, @global_ipv6_address : String? = nil, @global_ipv6_prefix_len : Int64? = nil, @mac_address : String? = nil, @driver_opts : Hash(String, String)? = nil)
    end
  end

  class EndpointSpec
    include JSON::Serializable

    @[JSON::Field(key: "Mode")]
    property! mode : String?

    @[JSON::Field(key: "Ports")]
    property! ports : Array(EndpointPortConfig)?

    def initialize(@mode : String? = nil, @ports : Array(EndpointPortConfig)? = nil)
    end
  end

  class EngineDescription
    include JSON::Serializable

    @[JSON::Field(key: "EngineVersion")]
    property! engine_version : String?

    @[JSON::Field(key: "Labels")]
    property! labels : Hash(String, String)?

    @[JSON::Field(key: "Plugins")]
    property! plugins : Array(EngineDescription::Plugins)?

    def initialize(@engine_version : String? = nil, @labels : Hash(String, String)? = nil, @plugins : Array(EngineDescription::Plugins)? = nil)
    end
  end

  class EngineDescription::Plugins
    include JSON::Serializable

    @[JSON::Field(key: "Type")]
    property! type : String?

    @[JSON::Field(key: "Name")]
    property! name : String?

    def initialize(@type : String? = nil, @name : String? = nil)
    end
  end

  class ErrorDetail
    include JSON::Serializable

    @[JSON::Field(key: "code")]
    property! code : Int64?

    @[JSON::Field(key: "message")]
    property! message : String?

    def initialize(@code : Int64? = nil, @message : String? = nil)
    end
  end

  class EventActor
    include JSON::Serializable

    @[JSON::Field(key: "ID")]
    property! id : String?

    @[JSON::Field(key: "Attributes")]
    property! attributes : Hash(String, String)?

    def initialize(@id : String? = nil, @attributes : Hash(String, String)? = nil)
    end
  end

  class EventMessage
    include JSON::Serializable

    @[JSON::Field(key: "Type")]
    property! type : String?

    @[JSON::Field(key: "Action")]
    property! action : String?

    @[JSON::Field(key: "Actor")]
    property! actor : EventActor?

    @[JSON::Field(key: "scope")]
    property! scope : String?

    @[JSON::Field(key: "time")]
    property! time : Int64?

    @[JSON::Field(key: "timeNano")]
    property! time_nano : Int64?

    def initialize(@type : String? = nil, @action : String? = nil, @actor : EventActor? = nil, @scope : String? = nil, @time : Int64? = nil, @time_nano : Int64? = nil)
    end
  end

  class ExecConfig
    include JSON::Serializable

    @[JSON::Field(key: "AttachStdin")]
    property! attach_stdin : Bool?

    @[JSON::Field(key: "AttachStdout")]
    property! attach_stdout : Bool?

    @[JSON::Field(key: "AttachStderr")]
    property! attach_stderr : Bool?

    @[JSON::Field(key: "DetachKeys")]
    property! detach_keys : String?

    @[JSON::Field(key: "Tty")]
    property! tty : Bool?

    @[JSON::Field(key: "Env")]
    property! env : Array(String)?

    @[JSON::Field(key: "Cmd")]
    property! cmd : Array(String)?

    @[JSON::Field(key: "Privileged")]
    property! privileged : Bool?

    @[JSON::Field(key: "User")]
    property! user : String?

    @[JSON::Field(key: "WorkingDir")]
    property! working_dir : String?

    def initialize(@attach_stdin : Bool? = nil, @attach_stdout : Bool? = nil, @attach_stderr : Bool? = nil, @detach_keys : String? = nil, @tty : Bool? = nil, @env : Array(String)? = nil, @cmd : Array(String)? = nil, @privileged : Bool? = nil, @user : String? = nil, @working_dir : String? = nil)
    end
  end

  class ExecInspectResponse
    include JSON::Serializable

    @[JSON::Field(key: "CanRemove")]
    property! can_remove : Bool?

    @[JSON::Field(key: "DetachKeys")]
    property! detach_keys : String?

    @[JSON::Field(key: "ID")]
    property! id : String?

    @[JSON::Field(key: "Running")]
    property! running : Bool?

    @[JSON::Field(key: "ExitCode")]
    property! exit_code : Int64?

    @[JSON::Field(key: "ProcessConfig")]
    property! process_config : ProcessConfig?

    @[JSON::Field(key: "OpenStdin")]
    property! open_stdin : Bool?

    @[JSON::Field(key: "OpenStderr")]
    property! open_stderr : Bool?

    @[JSON::Field(key: "OpenStdout")]
    property! open_stdout : Bool?

    @[JSON::Field(key: "ContainerID")]
    property! container_id : String?

    @[JSON::Field(key: "Pid")]
    property! pid : Int64?

    def initialize(@can_remove : Bool? = nil, @detach_keys : String? = nil, @id : String? = nil, @running : Bool? = nil, @exit_code : Int64? = nil, @process_config : ProcessConfig? = nil, @open_stdin : Bool? = nil, @open_stderr : Bool? = nil, @open_stdout : Bool? = nil, @container_id : String? = nil, @pid : Int64? = nil)
    end
  end

  class ExecStartConfig
    include JSON::Serializable

    @[JSON::Field(key: "Detach")]
    property! detach : Bool?

    @[JSON::Field(key: "Tty")]
    property! tty : Bool?

    def initialize(@detach : Bool? = nil, @tty : Bool? = nil)
    end
  end

  class GenericResource
    include JSON::Serializable

    @[JSON::Field(key: "NamedResourceSpec")]
    property! named_resource_spec : GenericResource::NamedResourceSpec?

    @[JSON::Field(key: "DiscreteResourceSpec")]
    property! discrete_resource_spec : GenericResource::DiscreteResourceSpec?

    def initialize(@named_resource_spec : GenericResource::NamedResourceSpec? = nil, @discrete_resource_spec : GenericResource::DiscreteResourceSpec? = nil)
    end
  end

  class GenericResource::DiscreteResourceSpec
    include JSON::Serializable

    @[JSON::Field(key: "Kind")]
    property! kind : String?

    @[JSON::Field(key: "Value")]
    property! value : Int64?

    def initialize(@kind : String? = nil, @value : Int64? = nil)
    end
  end

  class GenericResource::NamedResourceSpec
    include JSON::Serializable

    @[JSON::Field(key: "Kind")]
    property! kind : String?

    @[JSON::Field(key: "Value")]
    property! value : String?

    def initialize(@kind : String? = nil, @value : String? = nil)
    end
  end

  class GraphDriverData
    include JSON::Serializable

    @[JSON::Field(key: "Name")]
    property! name : String

    @[JSON::Field(key: "Data")]
    property! data : Hash(String, String)

    def initialize(@name : String, @data : Hash(String, String))
    end
  end

  class Health
    include JSON::Serializable

    @[JSON::Field(key: "Status")]
    property! status : String?

    @[JSON::Field(key: "FailingStreak")]
    property! failing_streak : Int64?

    @[JSON::Field(key: "Log")]
    property! log : Array(HealthcheckResult)?

    def initialize(@status : String? = nil, @failing_streak : Int64? = nil, @log : Array(HealthcheckResult)? = nil)
    end
  end

  class HealthConfig
    include JSON::Serializable

    @[JSON::Field(key: "Test")]
    property! test : Array(String)?

    @[JSON::Field(key: "Interval")]
    property! interval : Int64?

    @[JSON::Field(key: "Timeout")]
    property! timeout : Int64?

    @[JSON::Field(key: "Retries")]
    property! retries : Int64?

    @[JSON::Field(key: "StartPeriod")]
    property! start_period : Int64?

    def initialize(@test : Array(String)? = nil, @interval : Int64? = nil, @timeout : Int64? = nil, @retries : Int64? = nil, @start_period : Int64? = nil)
    end
  end

  class HealthcheckResult
    include JSON::Serializable

    @[JSON::Field(key: "Start")]
    property! start : Time?

    @[JSON::Field(key: "End")]
    property! end : Time?

    @[JSON::Field(key: "ExitCode")]
    property! exit_code : Int64?

    @[JSON::Field(key: "Output")]
    property! output : String?

    def initialize(@start : Time? = nil, @end : Time? = nil, @exit_code : Int64? = nil, @output : String? = nil)
    end
  end

  class HistoryResponseItem
    include JSON::Serializable

    @[JSON::Field(key: "Id")]
    property! id : String

    @[JSON::Field(key: "Created")]
    property! created : Int64

    @[JSON::Field(key: "CreatedBy")]
    property! created_by : String

    @[JSON::Field(key: "Tags")]
    property! tags : Array(String)

    @[JSON::Field(key: "Size")]
    property! size : Int64

    @[JSON::Field(key: "Comment")]
    property! comment : String

    def initialize(@id : String, @created : Int64, @created_by : String, @tags : Array(String), @size : Int64, @comment : String)
    end
  end

  class HostConfig
    include JSON::Serializable

    @[JSON::Field(key: "CpuShares")]
    property! cpu_shares : Int64?

    @[JSON::Field(key: "Memory")]
    property! memory : Int64?

    @[JSON::Field(key: "CgroupParent")]
    property! cgroup_parent : String?

    @[JSON::Field(key: "BlkioWeight")]
    property! blkio_weight : Int64?

    @[JSON::Field(key: "BlkioWeightDevice")]
    property! blkio_weight_device : Array(HostConfig::BlkioWeightDevice)?

    @[JSON::Field(key: "BlkioDeviceReadBps")]
    property! blkio_device_read_bps : Array(ThrottleDevice)?

    @[JSON::Field(key: "BlkioDeviceWriteBps")]
    property! blkio_device_write_bps : Array(ThrottleDevice)?

    @[JSON::Field(key: "BlkioDeviceReadIOps")]
    property! blkio_device_read_i_ops : Array(ThrottleDevice)?

    @[JSON::Field(key: "BlkioDeviceWriteIOps")]
    property! blkio_device_write_i_ops : Array(ThrottleDevice)?

    @[JSON::Field(key: "CpuPeriod")]
    property! cpu_period : Int64?

    @[JSON::Field(key: "CpuQuota")]
    property! cpu_quota : Int64?

    @[JSON::Field(key: "CpuRealtimePeriod")]
    property! cpu_realtime_period : Int64?

    @[JSON::Field(key: "CpuRealtimeRuntime")]
    property! cpu_realtime_runtime : Int64?

    @[JSON::Field(key: "CpusetCpus")]
    property! cpuset_cpus : String?

    @[JSON::Field(key: "CpusetMems")]
    property! cpuset_mems : String?

    @[JSON::Field(key: "Devices")]
    property! devices : Array(DeviceMapping)?

    @[JSON::Field(key: "DeviceCgroupRules")]
    property! device_cgroup_rules : Array(String)?

    @[JSON::Field(key: "DeviceRequests")]
    property! device_requests : Array(DeviceRequest)?

    @[JSON::Field(key: "KernelMemory")]
    property! kernel_memory : Int64?

    @[JSON::Field(key: "KernelMemoryTCP")]
    property! kernel_memory_tcp : Int64?

    @[JSON::Field(key: "MemoryReservation")]
    property! memory_reservation : Int64?

    @[JSON::Field(key: "MemorySwap")]
    property! memory_swap : Int64?

    @[JSON::Field(key: "MemorySwappiness")]
    property! memory_swappiness : Int64?

    @[JSON::Field(key: "NanoCpus")]
    property! nano_cpus : Int64?

    @[JSON::Field(key: "OomKillDisable")]
    property! oom_kill_disable : Bool?

    @[JSON::Field(key: "Init")]
    property! init : Bool?

    @[JSON::Field(key: "PidsLimit")]
    property! pids_limit : Int64?

    @[JSON::Field(key: "Ulimits")]
    property! ulimits : Array(HostConfig::Ulimits)?

    @[JSON::Field(key: "CpuCount")]
    property! cpu_count : Int64?

    @[JSON::Field(key: "CpuPercent")]
    property! cpu_percent : Int64?

    @[JSON::Field(key: "IOMaximumIOps")]
    property! io_maximum_i_ops : Int64?

    @[JSON::Field(key: "IOMaximumBandwidth")]
    property! io_maximum_bandwidth : Int64?

    @[JSON::Field(key: "Binds")]
    property! binds : Array(String)?

    @[JSON::Field(key: "ContainerIDFile")]
    property! container_id_file : String?

    @[JSON::Field(key: "LogConfig")]
    property! log_config : HostConfig::LogConfig?

    @[JSON::Field(key: "NetworkMode")]
    property! network_mode : String?

    @[JSON::Field(key: "PortBindings")]
    property! port_bindings : PortMap?

    @[JSON::Field(key: "RestartPolicy")]
    property! restart_policy : RestartPolicy?

    @[JSON::Field(key: "AutoRemove")]
    property! auto_remove : Bool?

    @[JSON::Field(key: "VolumeDriver")]
    property! volume_driver : String?

    @[JSON::Field(key: "VolumesFrom")]
    property! volumes_from : Array(String)?

    @[JSON::Field(key: "Mounts")]
    property! mounts : Array(Mount)?

    @[JSON::Field(key: "Capabilities")]
    property! capabilities : Array(String)?

    @[JSON::Field(key: "CapAdd")]
    property! cap_add : Array(String)?

    @[JSON::Field(key: "CapDrop")]
    property! cap_drop : Array(String)?

    @[JSON::Field(key: "Dns")]
    property! dns : Array(String)?

    @[JSON::Field(key: "DnsOptions")]
    property! dns_options : Array(String)?

    @[JSON::Field(key: "DnsSearch")]
    property! dns_search : Array(String)?

    @[JSON::Field(key: "ExtraHosts")]
    property! extra_hosts : Array(String)?

    @[JSON::Field(key: "GroupAdd")]
    property! group_add : Array(String)?

    @[JSON::Field(key: "IpcMode")]
    property! ipc_mode : String?

    @[JSON::Field(key: "Cgroup")]
    property! cgroup : String?

    @[JSON::Field(key: "Links")]
    property! links : Array(String)?

    @[JSON::Field(key: "OomScoreAdj")]
    property! oom_score_adj : Int64?

    @[JSON::Field(key: "PidMode")]
    property! pid_mode : String?

    @[JSON::Field(key: "Privileged")]
    property! privileged : Bool?

    @[JSON::Field(key: "PublishAllPorts")]
    property! publish_all_ports : Bool?

    @[JSON::Field(key: "ReadonlyRootfs")]
    property! readonly_rootfs : Bool?

    @[JSON::Field(key: "SecurityOpt")]
    property! security_opt : Array(String)?

    @[JSON::Field(key: "StorageOpt")]
    property! storage_opt : Hash(String, String)?

    @[JSON::Field(key: "Tmpfs")]
    property! tmpfs : Hash(String, String)?

    @[JSON::Field(key: "UTSMode")]
    property! uts_mode : String?

    @[JSON::Field(key: "UsernsMode")]
    property! userns_mode : String?

    @[JSON::Field(key: "ShmSize")]
    property! shm_size : Int64?

    @[JSON::Field(key: "Sysctls")]
    property! sysctls : Hash(String, String)?

    @[JSON::Field(key: "Runtime")]
    property! runtime : String?

    @[JSON::Field(key: "ConsoleSize")]
    property! console_size : Array(Int64)?

    @[JSON::Field(key: "Isolation")]
    property! isolation : String?

    @[JSON::Field(key: "MaskedPaths")]
    property! masked_paths : Array(String)?

    @[JSON::Field(key: "ReadonlyPaths")]
    property! readonly_paths : Array(String)?

    def initialize(@cpu_shares : Int64? = nil, @memory : Int64? = nil, @cgroup_parent : String? = nil, @blkio_weight : Int64? = nil, @blkio_weight_device : Array(HostConfig::BlkioWeightDevice)? = nil, @blkio_device_read_bps : Array(ThrottleDevice)? = nil, @blkio_device_write_bps : Array(ThrottleDevice)? = nil, @blkio_device_read_i_ops : Array(ThrottleDevice)? = nil, @blkio_device_write_i_ops : Array(ThrottleDevice)? = nil, @cpu_period : Int64? = nil, @cpu_quota : Int64? = nil, @cpu_realtime_period : Int64? = nil, @cpu_realtime_runtime : Int64? = nil, @cpuset_cpus : String? = nil, @cpuset_mems : String? = nil, @devices : Array(DeviceMapping)? = nil, @device_cgroup_rules : Array(String)? = nil, @device_requests : Array(DeviceRequest)? = nil, @kernel_memory : Int64? = nil, @kernel_memory_tcp : Int64? = nil, @memory_reservation : Int64? = nil, @memory_swap : Int64? = nil, @memory_swappiness : Int64? = nil, @nano_cpus : Int64? = nil, @oom_kill_disable : Bool? = nil, @init : Bool? = nil, @pids_limit : Int64? = nil, @ulimits : Array(HostConfig::Ulimits)? = nil, @cpu_count : Int64? = nil, @cpu_percent : Int64? = nil, @io_maximum_i_ops : Int64? = nil, @io_maximum_bandwidth : Int64? = nil, @binds : Array(String)? = nil, @container_id_file : String? = nil, @log_config : HostConfig::LogConfig? = nil, @network_mode : String? = nil, @port_bindings : PortMap? = nil, @restart_policy : RestartPolicy? = nil, @auto_remove : Bool? = nil, @volume_driver : String? = nil, @volumes_from : Array(String)? = nil, @mounts : Array(Mount)? = nil, @capabilities : Array(String)? = nil, @cap_add : Array(String)? = nil, @cap_drop : Array(String)? = nil, @dns : Array(String)? = nil, @dns_options : Array(String)? = nil, @dns_search : Array(String)? = nil, @extra_hosts : Array(String)? = nil, @group_add : Array(String)? = nil, @ipc_mode : String? = nil, @cgroup : String? = nil, @links : Array(String)? = nil, @oom_score_adj : Int64? = nil, @pid_mode : String? = nil, @privileged : Bool? = nil, @publish_all_ports : Bool? = nil, @readonly_rootfs : Bool? = nil, @security_opt : Array(String)? = nil, @storage_opt : Hash(String, String)? = nil, @tmpfs : Hash(String, String)? = nil, @uts_mode : String? = nil, @userns_mode : String? = nil, @shm_size : Int64? = nil, @sysctls : Hash(String, String)? = nil, @runtime : String? = nil, @console_size : Array(Int64)? = nil, @isolation : String? = nil, @masked_paths : Array(String)? = nil, @readonly_paths : Array(String)? = nil)
    end
  end

  class HostConfig::BlkioWeightDevice
    include JSON::Serializable

    @[JSON::Field(key: "Path")]
    property! path : String?

    @[JSON::Field(key: "Weight")]
    property! weight : Int64?

    def initialize(@path : String? = nil, @weight : Int64? = nil)
    end
  end

  class HostConfig::LogConfig
    include JSON::Serializable

    @[JSON::Field(key: "Type")]
    property! type : String?

    @[JSON::Field(key: "Config")]
    property! config : Hash(String, String)?

    def initialize(@type : String? = nil, @config : Hash(String, String)? = nil)
    end
  end

  class HostConfig::Ulimits
    include JSON::Serializable

    @[JSON::Field(key: "Name")]
    property! name : String?

    @[JSON::Field(key: "Soft")]
    property! soft : Int64?

    @[JSON::Field(key: "Hard")]
    property! hard : Int64?

    def initialize(@name : String? = nil, @soft : Int64? = nil, @hard : Int64? = nil)
    end
  end

  class IPAM
    include JSON::Serializable

    @[JSON::Field(key: "Driver")]
    property! driver : String?

    @[JSON::Field(key: "Config")]
    property! config : Array(Hash(String, String))?

    @[JSON::Field(key: "Options")]
    property! options : Hash(String, String)?

    def initialize(@driver : String? = nil, @config : Array(Hash(String, String))? = nil, @options : Hash(String, String)? = nil)
    end
  end

  class IdResponse
    include JSON::Serializable

    @[JSON::Field(key: "Id")]
    property! id : String

    def initialize(@id : String)
    end
  end

  class ImageDeleteResponseItem
    include JSON::Serializable

    @[JSON::Field(key: "Untagged")]
    property! untagged : String?

    @[JSON::Field(key: "Deleted")]
    property! deleted : String?

    def initialize(@untagged : String? = nil, @deleted : String? = nil)
    end
  end

  class ImageID
    include JSON::Serializable

    @[JSON::Field(key: "ID")]
    property! id : String?

    def initialize(@id : String? = nil)
    end
  end

  class ImageInspect
    include JSON::Serializable

    @[JSON::Field(key: "Id")]
    property! id : String

    @[JSON::Field(key: "RepoTags")]
    property! repo_tags : Array(String)?

    @[JSON::Field(key: "RepoDigests")]
    property! repo_digests : Array(String)?

    @[JSON::Field(key: "Parent")]
    property! parent : String

    @[JSON::Field(key: "Comment")]
    property! comment : String

    @[JSON::Field(key: "Created")]
    property! created : String

    @[JSON::Field(key: "Container")]
    property! container : String

    @[JSON::Field(key: "ContainerConfig")]
    property! container_config : ContainerConfig?

    @[JSON::Field(key: "DockerVersion")]
    property! docker_version : String

    @[JSON::Field(key: "Author")]
    property! author : String

    @[JSON::Field(key: "Config")]
    property! config : ContainerConfig?

    @[JSON::Field(key: "Architecture")]
    property! architecture : String

    @[JSON::Field(key: "Variant")]
    property! variant : String?

    @[JSON::Field(key: "Os")]
    property! os : String

    @[JSON::Field(key: "OsVersion")]
    property! os_version : String?

    @[JSON::Field(key: "Size")]
    property! size : Int64

    @[JSON::Field(key: "VirtualSize")]
    property! virtual_size : Int64

    @[JSON::Field(key: "GraphDriver")]
    property! graph_driver : GraphDriverData?

    @[JSON::Field(key: "RootFS")]
    property! root_fs : ImageInspect::RootFS?

    @[JSON::Field(key: "Metadata")]
    property! metadata : ImageInspect::Metadata?

    def initialize(@id : String, @parent : String, @comment : String, @created : String, @container : String, @docker_version : String, @author : String, @architecture : String, @os : String, @size : Int64, @virtual_size : Int64, @repo_tags : Array(String)? = nil, @repo_digests : Array(String)? = nil, @container_config : ContainerConfig? = nil, @config : ContainerConfig? = nil, @variant : String? = nil, @os_version : String? = nil, @graph_driver : GraphDriverData? = nil, @root_fs : ImageInspect::RootFS? = nil, @metadata : ImageInspect::Metadata? = nil)
    end
  end

  class ImageInspect::Metadata
    include JSON::Serializable

    @[JSON::Field(key: "LastTagTime")]
    property! last_tag_time : Time?

    def initialize(@last_tag_time : Time? = nil)
    end
  end

  class ImageInspect::RootFS
    include JSON::Serializable

    @[JSON::Field(key: "Type")]
    property! type : String

    @[JSON::Field(key: "Layers")]
    property! layers : Array(String)?

    def initialize(@type : String, @layers : Array(String)? = nil)
    end
  end

  class ImagePruneResponse
    include JSON::Serializable

    @[JSON::Field(key: "ImagesDeleted")]
    property! images_deleted : Array(ImageDeleteResponseItem)?

    @[JSON::Field(key: "SpaceReclaimed")]
    property! space_reclaimed : Int64?

    def initialize(@images_deleted : Array(ImageDeleteResponseItem)? = nil, @space_reclaimed : Int64? = nil)
    end
  end

  class ImageSearchResponseItem
    include JSON::Serializable

    @[JSON::Field(key: "description")]
    property! description : String?

    @[JSON::Field(key: "is_official")]
    property! is_official : Bool?

    @[JSON::Field(key: "is_automated")]
    property! is_automated : Bool?

    @[JSON::Field(key: "name")]
    property! name : String?

    @[JSON::Field(key: "star_count")]
    property! star_count : Int64?

    def initialize(@description : String? = nil, @is_official : Bool? = nil, @is_automated : Bool? = nil, @name : String? = nil, @star_count : Int64? = nil)
    end
  end

  class ImageSummary
    include JSON::Serializable

    @[JSON::Field(key: "Id")]
    property! id : String

    @[JSON::Field(key: "ParentId")]
    property! parent_id : String

    @[JSON::Field(key: "RepoTags")]
    property! repo_tags : Array(String)

    @[JSON::Field(key: "RepoDigests")]
    property! repo_digests : Array(String)

    @[JSON::Field(key: "Created")]
    property! created : Int64

    @[JSON::Field(key: "Size")]
    property! size : Int64

    @[JSON::Field(key: "SharedSize")]
    property! shared_size : Int64

    @[JSON::Field(key: "VirtualSize")]
    property! virtual_size : Int64

    @[JSON::Field(key: "Labels")]
    property! labels : Hash(String, String)

    @[JSON::Field(key: "Containers")]
    property! containers : Int64

    def initialize(@id : String, @parent_id : String, @repo_tags : Array(String), @repo_digests : Array(String), @created : Int64, @size : Int64, @shared_size : Int64, @virtual_size : Int64, @labels : Hash(String, String), @containers : Int64)
    end
  end

  class IndexInfo
    include JSON::Serializable

    @[JSON::Field(key: "Name")]
    property! name : String?

    @[JSON::Field(key: "Mirrors")]
    property! mirrors : Array(String)?

    @[JSON::Field(key: "Secure")]
    property! secure : Bool?

    @[JSON::Field(key: "Official")]
    property! official : Bool?

    def initialize(@name : String? = nil, @mirrors : Array(String)? = nil, @secure : Bool? = nil, @official : Bool? = nil)
    end
  end

  class JoinTokens
    include JSON::Serializable

    @[JSON::Field(key: "Worker")]
    property! worker : String?

    @[JSON::Field(key: "Manager")]
    property! manager : String?

    def initialize(@worker : String? = nil, @manager : String? = nil)
    end
  end

  class ManagerStatus
    include JSON::Serializable

    @[JSON::Field(key: "Leader")]
    property! leader : Bool?

    @[JSON::Field(key: "Reachability")]
    property! reachability : Reachability?

    @[JSON::Field(key: "Addr")]
    property! addr : String?

    def initialize(@leader : Bool? = nil, @reachability : Reachability? = nil, @addr : String? = nil)
    end
  end

  class Mount
    include JSON::Serializable

    @[JSON::Field(key: "Target")]
    property! target : String?

    @[JSON::Field(key: "Source")]
    property! source : String?

    @[JSON::Field(key: "Type")]
    property! type : String?

    @[JSON::Field(key: "ReadOnly")]
    property! read_only : Bool?

    @[JSON::Field(key: "Consistency")]
    property! consistency : String?

    @[JSON::Field(key: "BindOptions")]
    property! bind_options : Mount::BindOptions?

    @[JSON::Field(key: "VolumeOptions")]
    property! volume_options : Mount::VolumeOptions?

    @[JSON::Field(key: "TmpfsOptions")]
    property! tmpfs_options : Mount::TmpfsOptions?

    def initialize(@target : String? = nil, @source : String? = nil, @type : String? = nil, @read_only : Bool? = nil, @consistency : String? = nil, @bind_options : Mount::BindOptions? = nil, @volume_options : Mount::VolumeOptions? = nil, @tmpfs_options : Mount::TmpfsOptions? = nil)
    end
  end

  class Mount::BindOptions
    include JSON::Serializable

    @[JSON::Field(key: "Propagation")]
    property! propagation : String?

    @[JSON::Field(key: "NonRecursive")]
    property! non_recursive : Bool?

    def initialize(@propagation : String? = nil, @non_recursive : Bool? = nil)
    end
  end

  class Mount::TmpfsOptions
    include JSON::Serializable

    @[JSON::Field(key: "SizeBytes")]
    property! size_bytes : Int64?

    @[JSON::Field(key: "Mode")]
    property! mode : Int64?

    def initialize(@size_bytes : Int64? = nil, @mode : Int64? = nil)
    end
  end

  class Mount::VolumeOptions
    include JSON::Serializable

    @[JSON::Field(key: "NoCopy")]
    property! no_copy : Bool?

    @[JSON::Field(key: "Labels")]
    property! labels : Hash(String, String)?

    @[JSON::Field(key: "DriverConfig")]
    property! driver_config : Mount::VolumeOptions::DriverConfig?

    def initialize(@no_copy : Bool? = nil, @labels : Hash(String, String)? = nil, @driver_config : Mount::VolumeOptions::DriverConfig? = nil)
    end
  end

  class Mount::VolumeOptions::DriverConfig
    include JSON::Serializable

    @[JSON::Field(key: "Name")]
    property! name : String?

    @[JSON::Field(key: "Options")]
    property! options : Hash(String, String)?

    def initialize(@name : String? = nil, @options : Hash(String, String)? = nil)
    end
  end

  class MountPoint
    include JSON::Serializable

    @[JSON::Field(key: "Type")]
    property! type : String?

    @[JSON::Field(key: "Name")]
    property! name : String?

    @[JSON::Field(key: "Source")]
    property! source : String?

    @[JSON::Field(key: "Destination")]
    property! destination : String?

    @[JSON::Field(key: "Driver")]
    property! driver : String?

    @[JSON::Field(key: "Mode")]
    property! mode : String?

    @[JSON::Field(key: "RW")]
    property! rw : Bool?

    @[JSON::Field(key: "Propagation")]
    property! propagation : String?

    def initialize(@type : String? = nil, @name : String? = nil, @source : String? = nil, @destination : String? = nil, @driver : String? = nil, @mode : String? = nil, @rw : Bool? = nil, @propagation : String? = nil)
    end
  end

  class Network
    include JSON::Serializable

    @[JSON::Field(key: "Name")]
    property! name : String?

    @[JSON::Field(key: "Id")]
    property! id : String?

    @[JSON::Field(key: "Created")]
    property! created : Time?

    @[JSON::Field(key: "Scope")]
    property! scope : String?

    @[JSON::Field(key: "Driver")]
    property! driver : String?

    @[JSON::Field(key: "EnableIPv6")]
    property! enable_ipv6 : Bool?

    @[JSON::Field(key: "IPAM")]
    property! ipam : IPAM?

    @[JSON::Field(key: "Internal")]
    property! internal : Bool?

    @[JSON::Field(key: "Attachable")]
    property! attachable : Bool?

    @[JSON::Field(key: "Ingress")]
    property! ingress : Bool?

    @[JSON::Field(key: "Containers")]
    property! containers : Hash(String, NetworkContainer)?

    @[JSON::Field(key: "Options")]
    property! options : Hash(String, String)?

    @[JSON::Field(key: "Labels")]
    property! labels : Hash(String, String)?

    def initialize(@name : String? = nil, @id : String? = nil, @created : Time? = nil, @scope : String? = nil, @driver : String? = nil, @enable_ipv6 : Bool? = nil, @ipam : IPAM? = nil, @internal : Bool? = nil, @attachable : Bool? = nil, @ingress : Bool? = nil, @containers : Hash(String, NetworkContainer)? = nil, @options : Hash(String, String)? = nil, @labels : Hash(String, String)? = nil)
    end
  end

  class NetworkAttachmentConfig
    include JSON::Serializable

    @[JSON::Field(key: "Target")]
    property! target : String?

    @[JSON::Field(key: "Aliases")]
    property! aliases : Array(String)?

    @[JSON::Field(key: "DriverOpts")]
    property! driver_opts : Hash(String, String)?

    def initialize(@target : String? = nil, @aliases : Array(String)? = nil, @driver_opts : Hash(String, String)? = nil)
    end
  end

  class NetworkConnectRequest
    include JSON::Serializable

    @[JSON::Field(key: "Container")]
    property! container : String?

    @[JSON::Field(key: "EndpointConfig")]
    property! endpoint_config : EndpointSettings?

    def initialize(@container : String? = nil, @endpoint_config : EndpointSettings? = nil)
    end
  end

  class NetworkContainer
    include JSON::Serializable

    @[JSON::Field(key: "Name")]
    property! name : String?

    @[JSON::Field(key: "EndpointID")]
    property! endpoint_id : String?

    @[JSON::Field(key: "MacAddress")]
    property! mac_address : String?

    @[JSON::Field(key: "IPv4Address")]
    property! ipv4_address : String?

    @[JSON::Field(key: "IPv6Address")]
    property! ipv6_address : String?

    def initialize(@name : String? = nil, @endpoint_id : String? = nil, @mac_address : String? = nil, @ipv4_address : String? = nil, @ipv6_address : String? = nil)
    end
  end

  class NetworkCreateRequest
    include JSON::Serializable

    @[JSON::Field(key: "Name")]
    property! name : String

    @[JSON::Field(key: "CheckDuplicate")]
    property! check_duplicate : Bool?

    @[JSON::Field(key: "Driver")]
    property! driver : String?

    @[JSON::Field(key: "Internal")]
    property! internal : Bool?

    @[JSON::Field(key: "Attachable")]
    property! attachable : Bool?

    @[JSON::Field(key: "Ingress")]
    property! ingress : Bool?

    @[JSON::Field(key: "IPAM")]
    property! ipam : IPAM?

    @[JSON::Field(key: "EnableIPv6")]
    property! enable_ipv6 : Bool?

    @[JSON::Field(key: "Options")]
    property! options : Hash(String, String)?

    @[JSON::Field(key: "Labels")]
    property! labels : Hash(String, String)?

    def initialize(@name : String, @check_duplicate : Bool? = nil, @driver : String? = nil, @internal : Bool? = nil, @attachable : Bool? = nil, @ingress : Bool? = nil, @ipam : IPAM? = nil, @enable_ipv6 : Bool? = nil, @options : Hash(String, String)? = nil, @labels : Hash(String, String)? = nil)
    end
  end

  class NetworkCreateResponse
    include JSON::Serializable

    @[JSON::Field(key: "Id")]
    property! id : String?

    @[JSON::Field(key: "Warning")]
    property! warning : String?

    def initialize(@id : String? = nil, @warning : String? = nil)
    end
  end

  class NetworkDisconnectRequest
    include JSON::Serializable

    @[JSON::Field(key: "Container")]
    property! container : String?

    @[JSON::Field(key: "Force")]
    property! force : Bool?

    def initialize(@container : String? = nil, @force : Bool? = nil)
    end
  end

  class NetworkPruneResponse
    include JSON::Serializable

    @[JSON::Field(key: "NetworksDeleted")]
    property! networks_deleted : Array(String)?

    def initialize(@networks_deleted : Array(String)? = nil)
    end
  end

  class NetworkSettings
    include JSON::Serializable

    @[JSON::Field(key: "Bridge")]
    property! bridge : String?

    @[JSON::Field(key: "SandboxID")]
    property! sandbox_id : String?

    @[JSON::Field(key: "HairpinMode")]
    property! hairpin_mode : Bool?

    @[JSON::Field(key: "LinkLocalIPv6Address")]
    property! link_local_ipv6_address : String?

    @[JSON::Field(key: "LinkLocalIPv6PrefixLen")]
    property! link_local_ipv6_prefix_len : Int64?

    @[JSON::Field(key: "Ports")]
    property! ports : PortMap?

    @[JSON::Field(key: "SandboxKey")]
    property! sandbox_key : String?

    @[JSON::Field(key: "SecondaryIPAddresses")]
    property! secondary_ip_addresses : Array(Address)?

    @[JSON::Field(key: "SecondaryIPv6Addresses")]
    property! secondary_ipv6_addresses : Array(Address)?

    @[JSON::Field(key: "EndpointID")]
    property! endpoint_id : String?

    @[JSON::Field(key: "Gateway")]
    property! gateway : String?

    @[JSON::Field(key: "GlobalIPv6Address")]
    property! global_ipv6_address : String?

    @[JSON::Field(key: "GlobalIPv6PrefixLen")]
    property! global_ipv6_prefix_len : Int64?

    @[JSON::Field(key: "IPAddress")]
    property! ip_address : String?

    @[JSON::Field(key: "IPPrefixLen")]
    property! ip_prefix_len : Int64?

    @[JSON::Field(key: "IPv6Gateway")]
    property! ipv6_gateway : String?

    @[JSON::Field(key: "MacAddress")]
    property! mac_address : String?

    @[JSON::Field(key: "Networks")]
    property! networks : Hash(String, EndpointSettings)?

    def initialize(@bridge : String? = nil, @sandbox_id : String? = nil, @hairpin_mode : Bool? = nil, @link_local_ipv6_address : String? = nil, @link_local_ipv6_prefix_len : Int64? = nil, @ports : PortMap? = nil, @sandbox_key : String? = nil, @secondary_ip_addresses : Array(Address)? = nil, @secondary_ipv6_addresses : Array(Address)? = nil, @endpoint_id : String? = nil, @gateway : String? = nil, @global_ipv6_address : String? = nil, @global_ipv6_prefix_len : Int64? = nil, @ip_address : String? = nil, @ip_prefix_len : Int64? = nil, @ipv6_gateway : String? = nil, @mac_address : String? = nil, @networks : Hash(String, EndpointSettings)? = nil)
    end
  end

  class NetworkingConfig
    include JSON::Serializable

    @[JSON::Field(key: "EndpointsConfig")]
    property! endpoints_config : Hash(String, EndpointSettings)?

    def initialize(@endpoints_config : Hash(String, EndpointSettings)? = nil)
    end
  end

  class Node
    include JSON::Serializable

    @[JSON::Field(key: "ID")]
    property! id : String?

    @[JSON::Field(key: "Version")]
    property! version : ObjectVersion?

    @[JSON::Field(key: "CreatedAt")]
    property! created_at : Time?

    @[JSON::Field(key: "UpdatedAt")]
    property! updated_at : Time?

    @[JSON::Field(key: "Spec")]
    property! spec : NodeSpec?

    @[JSON::Field(key: "Description")]
    property! description : NodeDescription?

    @[JSON::Field(key: "Status")]
    property! status : NodeStatus?

    @[JSON::Field(key: "ManagerStatus")]
    property! manager_status : ManagerStatus?

    def initialize(@id : String? = nil, @version : ObjectVersion? = nil, @created_at : Time? = nil, @updated_at : Time? = nil, @spec : NodeSpec? = nil, @description : NodeDescription? = nil, @status : NodeStatus? = nil, @manager_status : ManagerStatus? = nil)
    end
  end

  class NodeDescription
    include JSON::Serializable

    @[JSON::Field(key: "Hostname")]
    property! hostname : String?

    @[JSON::Field(key: "Platform")]
    property! platform : Platform?

    @[JSON::Field(key: "Resources")]
    property! resources : ResourceObject?

    @[JSON::Field(key: "Engine")]
    property! engine : EngineDescription?

    @[JSON::Field(key: "TLSInfo")]
    property! tls_info : TLSInfo?

    def initialize(@hostname : String? = nil, @platform : Platform? = nil, @resources : ResourceObject? = nil, @engine : EngineDescription? = nil, @tls_info : TLSInfo? = nil)
    end
  end

  class NodeSpec
    include JSON::Serializable

    @[JSON::Field(key: "Name")]
    property! name : String?

    @[JSON::Field(key: "Labels")]
    property! labels : Hash(String, String)?

    @[JSON::Field(key: "Role")]
    property! role : String?

    @[JSON::Field(key: "Availability")]
    property! availability : String?

    def initialize(@name : String? = nil, @labels : Hash(String, String)? = nil, @role : String? = nil, @availability : String? = nil)
    end
  end

  class NodeStatus
    include JSON::Serializable

    @[JSON::Field(key: "State")]
    property! state : NodeState?

    @[JSON::Field(key: "Message")]
    property! message : String?

    @[JSON::Field(key: "Addr")]
    property! addr : String?

    def initialize(@state : NodeState? = nil, @message : String? = nil, @addr : String? = nil)
    end
  end

  class OCIDescriptor
    include JSON::Serializable

    @[JSON::Field(key: "mediaType")]
    property! media_type : String?

    @[JSON::Field(key: "digest")]
    property! digest : String?

    @[JSON::Field(key: "size")]
    property! size : Int64?

    def initialize(@media_type : String? = nil, @digest : String? = nil, @size : Int64? = nil)
    end
  end

  class OCIPlatform
    include JSON::Serializable

    @[JSON::Field(key: "architecture")]
    property! architecture : String?

    @[JSON::Field(key: "os")]
    property! os : String?

    @[JSON::Field(key: "os.version")]
    property! os_version : String?

    @[JSON::Field(key: "os.features")]
    property! os_features : Array(String)?

    @[JSON::Field(key: "variant")]
    property! variant : String?

    def initialize(@architecture : String? = nil, @os : String? = nil, @os_version : String? = nil, @os_features : Array(String)? = nil, @variant : String? = nil)
    end
  end

  class ObjectVersion
    include JSON::Serializable

    @[JSON::Field(key: "Index")]
    property! index : UInt64?

    def initialize(@index : UInt64? = nil)
    end
  end

  class PeerNode
    include JSON::Serializable

    @[JSON::Field(key: "NodeID")]
    property! node_id : String?

    @[JSON::Field(key: "Addr")]
    property! addr : String?

    def initialize(@node_id : String? = nil, @addr : String? = nil)
    end
  end

  class Platform
    include JSON::Serializable

    @[JSON::Field(key: "Architecture")]
    property! architecture : String?

    @[JSON::Field(key: "OS")]
    property! os : String?

    def initialize(@architecture : String? = nil, @os : String? = nil)
    end
  end

  class Plugin
    include JSON::Serializable

    @[JSON::Field(key: "Id")]
    property! id : String?

    @[JSON::Field(key: "Name")]
    property! name : String

    @[JSON::Field(key: "Enabled")]
    property! enabled : Bool

    @[JSON::Field(key: "Settings")]
    property! settings : Plugin::Settings

    @[JSON::Field(key: "PluginReference")]
    property! plugin_reference : String

    @[JSON::Field(key: "Config")]
    property! config : Plugin::Config

    def initialize(@name : String, @enabled : Bool, @settings : Plugin::Settings, @plugin_reference : String, @config : Plugin::Config, @id : String? = nil)
    end
  end

  class Plugin::Config
    include JSON::Serializable

    @[JSON::Field(key: "DockerVersion")]
    property! docker_version : String

    @[JSON::Field(key: "Description")]
    property! description : String

    @[JSON::Field(key: "Documentation")]
    property! documentation : String

    @[JSON::Field(key: "Interface")]
    property! interface : Plugin::Config::Interface

    @[JSON::Field(key: "Entrypoint")]
    property! entrypoint : Array(String)

    @[JSON::Field(key: "WorkDir")]
    property! work_dir : String

    @[JSON::Field(key: "User")]
    property! user : Plugin::Config::User

    @[JSON::Field(key: "Network")]
    property! network : Plugin::Config::Network

    @[JSON::Field(key: "Linux")]
    property! linux : Plugin::Config::Linux

    @[JSON::Field(key: "PropagatedMount")]
    property! propagated_mount : String

    @[JSON::Field(key: "IpcHost")]
    property! ipc_host : Bool

    @[JSON::Field(key: "PidHost")]
    property! pid_host : Bool

    @[JSON::Field(key: "Mounts")]
    property! mounts : Array(PluginMount)

    @[JSON::Field(key: "Env")]
    property! env : Array(PluginEnv)

    @[JSON::Field(key: "Args")]
    property! args : Plugin::Config::Args

    @[JSON::Field(key: "rootfs")]
    property! rootfs : Plugin::Config::Rootfs?

    def initialize(@docker_version : String, @description : String, @documentation : String, @interface : Plugin::Config::Interface, @entrypoint : Array(String), @work_dir : String, @user : Plugin::Config::User, @network : Plugin::Config::Network, @linux : Plugin::Config::Linux, @propagated_mount : String, @ipc_host : Bool, @pid_host : Bool, @mounts : Array(PluginMount), @env : Array(PluginEnv), @args : Plugin::Config::Args, @rootfs : Plugin::Config::Rootfs? = nil)
    end
  end

  class Plugin::Config::Args
    include JSON::Serializable

    @[JSON::Field(key: "Name")]
    property! name : String

    @[JSON::Field(key: "Description")]
    property! description : String

    @[JSON::Field(key: "Settable")]
    property! settable : Array(String)

    @[JSON::Field(key: "Value")]
    property! value : Array(String)

    def initialize(@name : String, @description : String, @settable : Array(String), @value : Array(String))
    end
  end

  class Plugin::Config::Interface
    include JSON::Serializable

    @[JSON::Field(key: "Types")]
    property! types : Array(PluginInterfaceType)

    @[JSON::Field(key: "Socket")]
    property! socket : String

    @[JSON::Field(key: "ProtocolScheme")]
    property! protocol_scheme : String?

    def initialize(@types : Array(PluginInterfaceType), @socket : String, @protocol_scheme : String? = nil)
    end
  end

  class Plugin::Config::Linux
    include JSON::Serializable

    @[JSON::Field(key: "Capabilities")]
    property! capabilities : Array(String)

    @[JSON::Field(key: "AllowAllDevices")]
    property! allow_all_devices : Bool

    @[JSON::Field(key: "Devices")]
    property! devices : Array(PluginDevice)

    def initialize(@capabilities : Array(String), @allow_all_devices : Bool, @devices : Array(PluginDevice))
    end
  end

  class Plugin::Config::Network
    include JSON::Serializable

    @[JSON::Field(key: "Type")]
    property! type : String

    def initialize(@type : String)
    end
  end

  class Plugin::Config::Rootfs
    include JSON::Serializable

    @[JSON::Field(key: "type")]
    property! type : String?

    @[JSON::Field(key: "diff_ids")]
    property! diff_ids : Array(String)?

    def initialize(@type : String? = nil, @diff_ids : Array(String)? = nil)
    end
  end

  class Plugin::Config::User
    include JSON::Serializable

    @[JSON::Field(key: "UID")]
    property! uid : UInt32?

    @[JSON::Field(key: "GID")]
    property! gid : UInt32?

    def initialize(@uid : UInt32? = nil, @gid : UInt32? = nil)
    end
  end

  class Plugin::Settings
    include JSON::Serializable

    @[JSON::Field(key: "Mounts")]
    property! mounts : Array(PluginMount)

    @[JSON::Field(key: "Env")]
    property! env : Array(String)

    @[JSON::Field(key: "Args")]
    property! args : Array(String)

    @[JSON::Field(key: "Devices")]
    property! devices : Array(PluginDevice)

    def initialize(@mounts : Array(PluginMount), @env : Array(String), @args : Array(String), @devices : Array(PluginDevice))
    end
  end

  class PluginDevice
    include JSON::Serializable

    @[JSON::Field(key: "Name")]
    property! name : String

    @[JSON::Field(key: "Description")]
    property! description : String

    @[JSON::Field(key: "Settable")]
    property! settable : Array(String)

    @[JSON::Field(key: "Path")]
    property! path : String

    def initialize(@name : String, @description : String, @settable : Array(String), @path : String)
    end
  end

  class PluginEnv
    include JSON::Serializable

    @[JSON::Field(key: "Name")]
    property! name : String

    @[JSON::Field(key: "Description")]
    property! description : String

    @[JSON::Field(key: "Settable")]
    property! settable : Array(String)

    @[JSON::Field(key: "Value")]
    property! value : String

    def initialize(@name : String, @description : String, @settable : Array(String), @value : String)
    end
  end

  class PluginInterfaceType
    include JSON::Serializable

    @[JSON::Field(key: "Prefix")]
    property! prefix : String

    @[JSON::Field(key: "Capability")]
    property! capability : String

    @[JSON::Field(key: "Version")]
    property! version : String

    def initialize(@prefix : String, @capability : String, @version : String)
    end
  end

  class PluginMount
    include JSON::Serializable

    @[JSON::Field(key: "Name")]
    property! name : String

    @[JSON::Field(key: "Description")]
    property! description : String

    @[JSON::Field(key: "Settable")]
    property! settable : Array(String)

    @[JSON::Field(key: "Source")]
    property! source : String

    @[JSON::Field(key: "Destination")]
    property! destination : String

    @[JSON::Field(key: "Type")]
    property! type : String

    @[JSON::Field(key: "Options")]
    property! options : Array(String)

    def initialize(@name : String, @description : String, @settable : Array(String), @source : String, @destination : String, @type : String, @options : Array(String))
    end
  end

  class PluginPrivilege
    include JSON::Serializable

    @[JSON::Field(key: "Name")]
    property! name : String?

    @[JSON::Field(key: "Description")]
    property! description : String?

    @[JSON::Field(key: "Value")]
    property! value : Array(String)?

    def initialize(@name : String? = nil, @description : String? = nil, @value : Array(String)? = nil)
    end
  end

  class PluginsInfo
    include JSON::Serializable

    @[JSON::Field(key: "Volume")]
    property! volume : Array(String)?

    @[JSON::Field(key: "Network")]
    property! network : Array(String)?

    @[JSON::Field(key: "Authorization")]
    property! authorization : Array(String)?

    @[JSON::Field(key: "Log")]
    property! log : Array(String)?

    def initialize(@volume : Array(String)? = nil, @network : Array(String)? = nil, @authorization : Array(String)? = nil, @log : Array(String)? = nil)
    end
  end

  class Port
    include JSON::Serializable

    @[JSON::Field(key: "IP")]
    property! ip : String?

    @[JSON::Field(key: "PrivatePort")]
    property! private_port : UInt16

    @[JSON::Field(key: "PublicPort")]
    property! public_port : UInt16?

    @[JSON::Field(key: "Type")]
    property! type : String

    def initialize(@private_port : UInt16, @type : String, @ip : String? = nil, @public_port : UInt16? = nil)
    end
  end

  class PortBinding
    include JSON::Serializable

    @[JSON::Field(key: "HostIp")]
    property! host_ip : String?

    @[JSON::Field(key: "HostPort")]
    property! host_port : String?

    def initialize(@host_ip : String? = nil, @host_port : String? = nil)
    end
  end

  class ProcessConfig
    include JSON::Serializable

    @[JSON::Field(key: "privileged")]
    property! privileged : Bool?

    @[JSON::Field(key: "user")]
    property! user : String?

    @[JSON::Field(key: "tty")]
    property! tty : Bool?

    @[JSON::Field(key: "entrypoint")]
    property! entrypoint : String?

    @[JSON::Field(key: "arguments")]
    property! arguments : Array(String)?

    def initialize(@privileged : Bool? = nil, @user : String? = nil, @tty : Bool? = nil, @entrypoint : String? = nil, @arguments : Array(String)? = nil)
    end
  end

  class ProgressDetail
    include JSON::Serializable

    @[JSON::Field(key: "current")]
    property! current : Int64?

    @[JSON::Field(key: "total")]
    property! total : Int64?

    def initialize(@current : Int64? = nil, @total : Int64? = nil)
    end
  end

  class PushImageInfo
    include JSON::Serializable

    @[JSON::Field(key: "error")]
    property! error : String?

    @[JSON::Field(key: "status")]
    property! status : String?

    @[JSON::Field(key: "progress")]
    property! progress : String?

    @[JSON::Field(key: "progressDetail")]
    property! progress_detail : ProgressDetail?

    def initialize(@error : String? = nil, @status : String? = nil, @progress : String? = nil, @progress_detail : ProgressDetail? = nil)
    end
  end

  class RegistryServiceConfig
    include JSON::Serializable

    @[JSON::Field(key: "AllowNondistributableArtifactsCIDRs")]
    property! allow_nondistributable_artifacts_cid_rs : Array(String)?

    @[JSON::Field(key: "AllowNondistributableArtifactsHostnames")]
    property! allow_nondistributable_artifacts_hostnames : Array(String)?

    @[JSON::Field(key: "InsecureRegistryCIDRs")]
    property! insecure_registry_cid_rs : Array(String)?

    @[JSON::Field(key: "IndexConfigs")]
    property! index_configs : Hash(String, IndexInfo)?

    @[JSON::Field(key: "Mirrors")]
    property! mirrors : Array(String)?

    def initialize(@allow_nondistributable_artifacts_cid_rs : Array(String)? = nil, @allow_nondistributable_artifacts_hostnames : Array(String)? = nil, @insecure_registry_cid_rs : Array(String)? = nil, @index_configs : Hash(String, IndexInfo)? = nil, @mirrors : Array(String)? = nil)
    end
  end

  class ResourceObject
    include JSON::Serializable

    @[JSON::Field(key: "NanoCPUs")]
    property! nano_cp_us : Int64?

    @[JSON::Field(key: "MemoryBytes")]
    property! memory_bytes : Int64?

    @[JSON::Field(key: "GenericResources")]
    property! generic_resources : GenericResources?

    def initialize(@nano_cp_us : Int64? = nil, @memory_bytes : Int64? = nil, @generic_resources : GenericResources? = nil)
    end
  end

  class Resources
    include JSON::Serializable

    @[JSON::Field(key: "CpuShares")]
    property! cpu_shares : Int64?

    @[JSON::Field(key: "Memory")]
    property! memory : Int64?

    @[JSON::Field(key: "CgroupParent")]
    property! cgroup_parent : String?

    @[JSON::Field(key: "BlkioWeight")]
    property! blkio_weight : Int64?

    @[JSON::Field(key: "BlkioWeightDevice")]
    property! blkio_weight_device : Array(Resources::BlkioWeightDevice)?

    @[JSON::Field(key: "BlkioDeviceReadBps")]
    property! blkio_device_read_bps : Array(ThrottleDevice)?

    @[JSON::Field(key: "BlkioDeviceWriteBps")]
    property! blkio_device_write_bps : Array(ThrottleDevice)?

    @[JSON::Field(key: "BlkioDeviceReadIOps")]
    property! blkio_device_read_i_ops : Array(ThrottleDevice)?

    @[JSON::Field(key: "BlkioDeviceWriteIOps")]
    property! blkio_device_write_i_ops : Array(ThrottleDevice)?

    @[JSON::Field(key: "CpuPeriod")]
    property! cpu_period : Int64?

    @[JSON::Field(key: "CpuQuota")]
    property! cpu_quota : Int64?

    @[JSON::Field(key: "CpuRealtimePeriod")]
    property! cpu_realtime_period : Int64?

    @[JSON::Field(key: "CpuRealtimeRuntime")]
    property! cpu_realtime_runtime : Int64?

    @[JSON::Field(key: "CpusetCpus")]
    property! cpuset_cpus : String?

    @[JSON::Field(key: "CpusetMems")]
    property! cpuset_mems : String?

    @[JSON::Field(key: "Devices")]
    property! devices : Array(DeviceMapping)?

    @[JSON::Field(key: "DeviceCgroupRules")]
    property! device_cgroup_rules : Array(String)?

    @[JSON::Field(key: "DeviceRequests")]
    property! device_requests : Array(DeviceRequest)?

    @[JSON::Field(key: "KernelMemory")]
    property! kernel_memory : Int64?

    @[JSON::Field(key: "KernelMemoryTCP")]
    property! kernel_memory_tcp : Int64?

    @[JSON::Field(key: "MemoryReservation")]
    property! memory_reservation : Int64?

    @[JSON::Field(key: "MemorySwap")]
    property! memory_swap : Int64?

    @[JSON::Field(key: "MemorySwappiness")]
    property! memory_swappiness : Int64?

    @[JSON::Field(key: "NanoCpus")]
    property! nano_cpus : Int64?

    @[JSON::Field(key: "OomKillDisable")]
    property! oom_kill_disable : Bool?

    @[JSON::Field(key: "Init")]
    property! init : Bool?

    @[JSON::Field(key: "PidsLimit")]
    property! pids_limit : Int64?

    @[JSON::Field(key: "Ulimits")]
    property! ulimits : Array(Resources::Ulimits)?

    @[JSON::Field(key: "CpuCount")]
    property! cpu_count : Int64?

    @[JSON::Field(key: "CpuPercent")]
    property! cpu_percent : Int64?

    @[JSON::Field(key: "IOMaximumIOps")]
    property! io_maximum_i_ops : Int64?

    @[JSON::Field(key: "IOMaximumBandwidth")]
    property! io_maximum_bandwidth : Int64?

    def initialize(@cpu_shares : Int64? = nil, @memory : Int64? = nil, @cgroup_parent : String? = nil, @blkio_weight : Int64? = nil, @blkio_weight_device : Array(Resources::BlkioWeightDevice)? = nil, @blkio_device_read_bps : Array(ThrottleDevice)? = nil, @blkio_device_write_bps : Array(ThrottleDevice)? = nil, @blkio_device_read_i_ops : Array(ThrottleDevice)? = nil, @blkio_device_write_i_ops : Array(ThrottleDevice)? = nil, @cpu_period : Int64? = nil, @cpu_quota : Int64? = nil, @cpu_realtime_period : Int64? = nil, @cpu_realtime_runtime : Int64? = nil, @cpuset_cpus : String? = nil, @cpuset_mems : String? = nil, @devices : Array(DeviceMapping)? = nil, @device_cgroup_rules : Array(String)? = nil, @device_requests : Array(DeviceRequest)? = nil, @kernel_memory : Int64? = nil, @kernel_memory_tcp : Int64? = nil, @memory_reservation : Int64? = nil, @memory_swap : Int64? = nil, @memory_swappiness : Int64? = nil, @nano_cpus : Int64? = nil, @oom_kill_disable : Bool? = nil, @init : Bool? = nil, @pids_limit : Int64? = nil, @ulimits : Array(Resources::Ulimits)? = nil, @cpu_count : Int64? = nil, @cpu_percent : Int64? = nil, @io_maximum_i_ops : Int64? = nil, @io_maximum_bandwidth : Int64? = nil)
    end
  end

  class Resources::BlkioWeightDevice
    include JSON::Serializable

    @[JSON::Field(key: "Path")]
    property! path : String?

    @[JSON::Field(key: "Weight")]
    property! weight : Int64?

    def initialize(@path : String? = nil, @weight : Int64? = nil)
    end
  end

  class Resources::Ulimits
    include JSON::Serializable

    @[JSON::Field(key: "Name")]
    property! name : String?

    @[JSON::Field(key: "Soft")]
    property! soft : Int64?

    @[JSON::Field(key: "Hard")]
    property! hard : Int64?

    def initialize(@name : String? = nil, @soft : Int64? = nil, @hard : Int64? = nil)
    end
  end

  class RestartPolicy
    include JSON::Serializable

    @[JSON::Field(key: "Name")]
    property! name : String?

    @[JSON::Field(key: "MaximumRetryCount")]
    property! maximum_retry_count : Int64?

    def initialize(@name : String? = nil, @maximum_retry_count : Int64? = nil)
    end
  end

  class Runtime
    include JSON::Serializable

    @[JSON::Field(key: "path")]
    property! path : String?

    @[JSON::Field(key: "runtimeArgs")]
    property! runtime_args : Array(String)?

    def initialize(@path : String? = nil, @runtime_args : Array(String)? = nil)
    end
  end

  class Secret
    include JSON::Serializable

    @[JSON::Field(key: "ID")]
    property! id : String?

    @[JSON::Field(key: "Version")]
    property! version : ObjectVersion?

    @[JSON::Field(key: "CreatedAt")]
    property! created_at : Time?

    @[JSON::Field(key: "UpdatedAt")]
    property! updated_at : Time?

    @[JSON::Field(key: "Spec")]
    property! spec : SecretSpec?

    def initialize(@id : String? = nil, @version : ObjectVersion? = nil, @created_at : Time? = nil, @updated_at : Time? = nil, @spec : SecretSpec? = nil)
    end
  end

  class SecretCreate
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    @[JSON::Field(key: "Name")]
    property! name : String?

    @[JSON::Field(key: "Labels")]
    property! labels : Hash(String, String)?

    @[JSON::Field(key: "Data")]
    property! data : String?

    @[JSON::Field(key: "Driver")]
    property! driver : Driver?

    @[JSON::Field(key: "Templating")]
    property! templating : Driver?

    def initialize(@name : String? = nil, @labels : Hash(String, String)? = nil, @data : String? = nil, @driver : Driver? = nil, @templating : Driver? = nil)
    end
  end

  class SecretSpec
    include JSON::Serializable

    @[JSON::Field(key: "Name")]
    property! name : String?

    @[JSON::Field(key: "Labels")]
    property! labels : Hash(String, String)?

    @[JSON::Field(key: "Data")]
    property! data : String?

    @[JSON::Field(key: "Driver")]
    property! driver : Driver?

    @[JSON::Field(key: "Templating")]
    property! templating : Driver?

    def initialize(@name : String? = nil, @labels : Hash(String, String)? = nil, @data : String? = nil, @driver : Driver? = nil, @templating : Driver? = nil)
    end
  end

  class Service
    include JSON::Serializable

    @[JSON::Field(key: "ID")]
    property! id : String?

    @[JSON::Field(key: "Version")]
    property! version : ObjectVersion?

    @[JSON::Field(key: "CreatedAt")]
    property! created_at : Time?

    @[JSON::Field(key: "UpdatedAt")]
    property! updated_at : Time?

    @[JSON::Field(key: "Spec")]
    property! spec : ServiceSpec?

    @[JSON::Field(key: "Endpoint")]
    property! endpoint : Service::Endpoint?

    @[JSON::Field(key: "UpdateStatus")]
    property! update_status : Service::UpdateStatus?

    def initialize(@id : String? = nil, @version : ObjectVersion? = nil, @created_at : Time? = nil, @updated_at : Time? = nil, @spec : ServiceSpec? = nil, @endpoint : Service::Endpoint? = nil, @update_status : Service::UpdateStatus? = nil)
    end
  end

  class Service::Endpoint
    include JSON::Serializable

    @[JSON::Field(key: "Spec")]
    property! spec : EndpointSpec?

    @[JSON::Field(key: "Ports")]
    property! ports : Array(EndpointPortConfig)?

    @[JSON::Field(key: "VirtualIPs")]
    property! virtual_i_ps : Array(Service::Endpoint::VirtualIPs)?

    def initialize(@spec : EndpointSpec? = nil, @ports : Array(EndpointPortConfig)? = nil, @virtual_i_ps : Array(Service::Endpoint::VirtualIPs)? = nil)
    end
  end

  class Service::Endpoint::VirtualIPs
    include JSON::Serializable

    @[JSON::Field(key: "NetworkID")]
    property! network_id : String?

    @[JSON::Field(key: "Addr")]
    property! addr : String?

    def initialize(@network_id : String? = nil, @addr : String? = nil)
    end
  end

  class Service::UpdateStatus
    include JSON::Serializable

    @[JSON::Field(key: "State")]
    property! state : String?

    @[JSON::Field(key: "StartedAt")]
    property! started_at : Time?

    @[JSON::Field(key: "CompletedAt")]
    property! completed_at : Time?

    @[JSON::Field(key: "Message")]
    property! message : String?

    def initialize(@state : String? = nil, @started_at : Time? = nil, @completed_at : Time? = nil, @message : String? = nil)
    end
  end

  class ServiceCreate
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    @[JSON::Field(key: "Name")]
    property! name : String?

    @[JSON::Field(key: "Labels")]
    property! labels : Hash(String, String)?

    @[JSON::Field(key: "TaskTemplate")]
    property! task_template : TaskSpec?

    @[JSON::Field(key: "Mode")]
    property! mode : ServiceCreate::Mode?

    @[JSON::Field(key: "UpdateConfig")]
    property! update_config : ServiceCreate::UpdateConfig?

    @[JSON::Field(key: "RollbackConfig")]
    property! rollback_config : ServiceCreate::RollbackConfig?

    @[JSON::Field(key: "Networks")]
    property! networks : Array(NetworkAttachmentConfig)?

    @[JSON::Field(key: "EndpointSpec")]
    property! endpoint_spec : EndpointSpec?

    def initialize(@name : String? = nil, @labels : Hash(String, String)? = nil, @task_template : TaskSpec? = nil, @mode : ServiceCreate::Mode? = nil, @update_config : ServiceCreate::UpdateConfig? = nil, @rollback_config : ServiceCreate::RollbackConfig? = nil, @networks : Array(NetworkAttachmentConfig)? = nil, @endpoint_spec : EndpointSpec? = nil)
    end
  end

  class ServiceCreate::Mode
    include JSON::Serializable

    @[JSON::Field(key: "Replicated")]
    property! replicated : ServiceCreate::Mode::Replicated?

    @[JSON::Field(key: "Global")]
    property! global : ServiceCreate::Mode::Global?

    def initialize(@replicated : ServiceCreate::Mode::Replicated? = nil, @global : ServiceCreate::Mode::Global? = nil)
    end
  end

  class ServiceCreate::Mode::Global
    include JSON::Serializable
  end

  class ServiceCreate::Mode::Replicated
    include JSON::Serializable

    @[JSON::Field(key: "Replicas")]
    property! replicas : Int64?

    def initialize(@replicas : Int64? = nil)
    end
  end

  class ServiceCreate::RollbackConfig
    include JSON::Serializable

    @[JSON::Field(key: "Parallelism")]
    property! parallelism : Int64?

    @[JSON::Field(key: "Delay")]
    property! delay : Int64?

    @[JSON::Field(key: "FailureAction")]
    property! failure_action : String?

    @[JSON::Field(key: "Monitor")]
    property! monitor : Int64?

    @[JSON::Field(key: "MaxFailureRatio")]
    property! max_failure_ratio : Float64?

    @[JSON::Field(key: "Order")]
    property! order : String?

    def initialize(@parallelism : Int64? = nil, @delay : Int64? = nil, @failure_action : String? = nil, @monitor : Int64? = nil, @max_failure_ratio : Float64? = nil, @order : String? = nil)
    end
  end

  class ServiceCreate::UpdateConfig
    include JSON::Serializable

    @[JSON::Field(key: "Parallelism")]
    property! parallelism : Int64?

    @[JSON::Field(key: "Delay")]
    property! delay : Int64?

    @[JSON::Field(key: "FailureAction")]
    property! failure_action : String?

    @[JSON::Field(key: "Monitor")]
    property! monitor : Int64?

    @[JSON::Field(key: "MaxFailureRatio")]
    property! max_failure_ratio : Float64?

    @[JSON::Field(key: "Order")]
    property! order : String?

    def initialize(@parallelism : Int64? = nil, @delay : Int64? = nil, @failure_action : String? = nil, @monitor : Int64? = nil, @max_failure_ratio : Float64? = nil, @order : String? = nil)
    end
  end

  class ServiceCreateResponse
    include JSON::Serializable

    @[JSON::Field(key: "ID")]
    property! id : String?

    @[JSON::Field(key: "Warning")]
    property! warning : String?

    def initialize(@id : String? = nil, @warning : String? = nil)
    end
  end

  class ServiceSpec
    include JSON::Serializable

    @[JSON::Field(key: "Name")]
    property! name : String?

    @[JSON::Field(key: "Labels")]
    property! labels : Hash(String, String)?

    @[JSON::Field(key: "TaskTemplate")]
    property! task_template : TaskSpec?

    @[JSON::Field(key: "Mode")]
    property! mode : ServiceSpec::Mode?

    @[JSON::Field(key: "UpdateConfig")]
    property! update_config : ServiceSpec::UpdateConfig?

    @[JSON::Field(key: "RollbackConfig")]
    property! rollback_config : ServiceSpec::RollbackConfig?

    @[JSON::Field(key: "Networks")]
    property! networks : Array(NetworkAttachmentConfig)?

    @[JSON::Field(key: "EndpointSpec")]
    property! endpoint_spec : EndpointSpec?

    def initialize(@name : String? = nil, @labels : Hash(String, String)? = nil, @task_template : TaskSpec? = nil, @mode : ServiceSpec::Mode? = nil, @update_config : ServiceSpec::UpdateConfig? = nil, @rollback_config : ServiceSpec::RollbackConfig? = nil, @networks : Array(NetworkAttachmentConfig)? = nil, @endpoint_spec : EndpointSpec? = nil)
    end
  end

  class ServiceSpec::Mode
    include JSON::Serializable

    @[JSON::Field(key: "Replicated")]
    property! replicated : ServiceSpec::Mode::Replicated?

    @[JSON::Field(key: "Global")]
    property! global : ServiceSpec::Mode::Global?

    def initialize(@replicated : ServiceSpec::Mode::Replicated? = nil, @global : ServiceSpec::Mode::Global? = nil)
    end
  end

  class ServiceSpec::Mode::Global
    include JSON::Serializable
  end

  class ServiceSpec::Mode::Replicated
    include JSON::Serializable

    @[JSON::Field(key: "Replicas")]
    property! replicas : Int64?

    def initialize(@replicas : Int64? = nil)
    end
  end

  class ServiceSpec::RollbackConfig
    include JSON::Serializable

    @[JSON::Field(key: "Parallelism")]
    property! parallelism : Int64?

    @[JSON::Field(key: "Delay")]
    property! delay : Int64?

    @[JSON::Field(key: "FailureAction")]
    property! failure_action : String?

    @[JSON::Field(key: "Monitor")]
    property! monitor : Int64?

    @[JSON::Field(key: "MaxFailureRatio")]
    property! max_failure_ratio : Float64?

    @[JSON::Field(key: "Order")]
    property! order : String?

    def initialize(@parallelism : Int64? = nil, @delay : Int64? = nil, @failure_action : String? = nil, @monitor : Int64? = nil, @max_failure_ratio : Float64? = nil, @order : String? = nil)
    end
  end

  class ServiceSpec::UpdateConfig
    include JSON::Serializable

    @[JSON::Field(key: "Parallelism")]
    property! parallelism : Int64?

    @[JSON::Field(key: "Delay")]
    property! delay : Int64?

    @[JSON::Field(key: "FailureAction")]
    property! failure_action : String?

    @[JSON::Field(key: "Monitor")]
    property! monitor : Int64?

    @[JSON::Field(key: "MaxFailureRatio")]
    property! max_failure_ratio : Float64?

    @[JSON::Field(key: "Order")]
    property! order : String?

    def initialize(@parallelism : Int64? = nil, @delay : Int64? = nil, @failure_action : String? = nil, @monitor : Int64? = nil, @max_failure_ratio : Float64? = nil, @order : String? = nil)
    end
  end

  class ServiceUpdate
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    @[JSON::Field(key: "Name")]
    property! name : String?

    @[JSON::Field(key: "Labels")]
    property! labels : Hash(String, String)?

    @[JSON::Field(key: "TaskTemplate")]
    property! task_template : TaskSpec?

    @[JSON::Field(key: "Mode")]
    property! mode : ServiceUpdate::Mode?

    @[JSON::Field(key: "UpdateConfig")]
    property! update_config : ServiceUpdate::UpdateConfig?

    @[JSON::Field(key: "RollbackConfig")]
    property! rollback_config : ServiceUpdate::RollbackConfig?

    @[JSON::Field(key: "Networks")]
    property! networks : Array(NetworkAttachmentConfig)?

    @[JSON::Field(key: "EndpointSpec")]
    property! endpoint_spec : EndpointSpec?

    def initialize(@name : String? = nil, @labels : Hash(String, String)? = nil, @task_template : TaskSpec? = nil, @mode : ServiceUpdate::Mode? = nil, @update_config : ServiceUpdate::UpdateConfig? = nil, @rollback_config : ServiceUpdate::RollbackConfig? = nil, @networks : Array(NetworkAttachmentConfig)? = nil, @endpoint_spec : EndpointSpec? = nil)
    end
  end

  class ServiceUpdate::Mode
    include JSON::Serializable

    @[JSON::Field(key: "Replicated")]
    property! replicated : ServiceUpdate::Mode::Replicated?

    @[JSON::Field(key: "Global")]
    property! global : ServiceUpdate::Mode::Global?

    def initialize(@replicated : ServiceUpdate::Mode::Replicated? = nil, @global : ServiceUpdate::Mode::Global? = nil)
    end
  end

  class ServiceUpdate::Mode::Global
    include JSON::Serializable
  end

  class ServiceUpdate::Mode::Replicated
    include JSON::Serializable

    @[JSON::Field(key: "Replicas")]
    property! replicas : Int64?

    def initialize(@replicas : Int64? = nil)
    end
  end

  class ServiceUpdate::RollbackConfig
    include JSON::Serializable

    @[JSON::Field(key: "Parallelism")]
    property! parallelism : Int64?

    @[JSON::Field(key: "Delay")]
    property! delay : Int64?

    @[JSON::Field(key: "FailureAction")]
    property! failure_action : String?

    @[JSON::Field(key: "Monitor")]
    property! monitor : Int64?

    @[JSON::Field(key: "MaxFailureRatio")]
    property! max_failure_ratio : Float64?

    @[JSON::Field(key: "Order")]
    property! order : String?

    def initialize(@parallelism : Int64? = nil, @delay : Int64? = nil, @failure_action : String? = nil, @monitor : Int64? = nil, @max_failure_ratio : Float64? = nil, @order : String? = nil)
    end
  end

  class ServiceUpdate::UpdateConfig
    include JSON::Serializable

    @[JSON::Field(key: "Parallelism")]
    property! parallelism : Int64?

    @[JSON::Field(key: "Delay")]
    property! delay : Int64?

    @[JSON::Field(key: "FailureAction")]
    property! failure_action : String?

    @[JSON::Field(key: "Monitor")]
    property! monitor : Int64?

    @[JSON::Field(key: "MaxFailureRatio")]
    property! max_failure_ratio : Float64?

    @[JSON::Field(key: "Order")]
    property! order : String?

    def initialize(@parallelism : Int64? = nil, @delay : Int64? = nil, @failure_action : String? = nil, @monitor : Int64? = nil, @max_failure_ratio : Float64? = nil, @order : String? = nil)
    end
  end

  class ServiceUpdateResponse
    include JSON::Serializable

    @[JSON::Field(key: "Warnings")]
    property! warnings : Array(String)?

    def initialize(@warnings : Array(String)? = nil)
    end
  end

  class Swarm
    include JSON::Serializable

    @[JSON::Field(key: "ID")]
    property! id : String?

    @[JSON::Field(key: "Version")]
    property! version : ObjectVersion?

    @[JSON::Field(key: "CreatedAt")]
    property! created_at : Time?

    @[JSON::Field(key: "UpdatedAt")]
    property! updated_at : Time?

    @[JSON::Field(key: "Spec")]
    property! spec : SwarmSpec?

    @[JSON::Field(key: "TLSInfo")]
    property! tls_info : TLSInfo?

    @[JSON::Field(key: "RootRotationInProgress")]
    property! root_rotation_in_progress : Bool?

    @[JSON::Field(key: "DataPathPort")]
    property! data_path_port : UInt32?

    @[JSON::Field(key: "DefaultAddrPool")]
    property! default_addr_pool : Array(String)?

    @[JSON::Field(key: "SubnetSize")]
    property! subnet_size : UInt32?

    @[JSON::Field(key: "JoinTokens")]
    property! join_tokens : JoinTokens?

    def initialize(@id : String? = nil, @version : ObjectVersion? = nil, @created_at : Time? = nil, @updated_at : Time? = nil, @spec : SwarmSpec? = nil, @tls_info : TLSInfo? = nil, @root_rotation_in_progress : Bool? = nil, @data_path_port : UInt32? = nil, @default_addr_pool : Array(String)? = nil, @subnet_size : UInt32? = nil, @join_tokens : JoinTokens? = nil)
    end
  end

  class SwarmInfo
    include JSON::Serializable

    @[JSON::Field(key: "NodeID")]
    property! node_id : String?

    @[JSON::Field(key: "NodeAddr")]
    property! node_addr : String?

    @[JSON::Field(key: "LocalNodeState")]
    property! local_node_state : LocalNodeState?

    @[JSON::Field(key: "ControlAvailable")]
    property! control_available : Bool?

    @[JSON::Field(key: "Error")]
    property! error : String?

    @[JSON::Field(key: "RemoteManagers")]
    property! remote_managers : Array(PeerNode)?

    @[JSON::Field(key: "Nodes")]
    property! nodes : Int64?

    @[JSON::Field(key: "Managers")]
    property! managers : Int64?

    @[JSON::Field(key: "Cluster")]
    property! cluster : ClusterInfo?

    def initialize(@node_id : String? = nil, @node_addr : String? = nil, @local_node_state : LocalNodeState? = nil, @control_available : Bool? = nil, @error : String? = nil, @remote_managers : Array(PeerNode)? = nil, @nodes : Int64? = nil, @managers : Int64? = nil, @cluster : ClusterInfo? = nil)
    end
  end

  class SwarmInitRequest
    include JSON::Serializable

    @[JSON::Field(key: "ListenAddr")]
    property! listen_addr : String?

    @[JSON::Field(key: "AdvertiseAddr")]
    property! advertise_addr : String?

    @[JSON::Field(key: "DataPathAddr")]
    property! data_path_addr : String?

    @[JSON::Field(key: "DataPathPort")]
    property! data_path_port : UInt32?

    @[JSON::Field(key: "DefaultAddrPool")]
    property! default_addr_pool : Array(String)?

    @[JSON::Field(key: "ForceNewCluster")]
    property! force_new_cluster : Bool?

    @[JSON::Field(key: "SubnetSize")]
    property! subnet_size : UInt32?

    @[JSON::Field(key: "Spec")]
    property! spec : SwarmSpec?

    def initialize(@listen_addr : String? = nil, @advertise_addr : String? = nil, @data_path_addr : String? = nil, @data_path_port : UInt32? = nil, @default_addr_pool : Array(String)? = nil, @force_new_cluster : Bool? = nil, @subnet_size : UInt32? = nil, @spec : SwarmSpec? = nil)
    end
  end

  class SwarmJoinRequest
    include JSON::Serializable

    @[JSON::Field(key: "ListenAddr")]
    property! listen_addr : String?

    @[JSON::Field(key: "AdvertiseAddr")]
    property! advertise_addr : String?

    @[JSON::Field(key: "DataPathAddr")]
    property! data_path_addr : String?

    @[JSON::Field(key: "RemoteAddrs")]
    property! remote_addrs : Array(String)?

    @[JSON::Field(key: "JoinToken")]
    property! join_token : String?

    def initialize(@listen_addr : String? = nil, @advertise_addr : String? = nil, @data_path_addr : String? = nil, @remote_addrs : Array(String)? = nil, @join_token : String? = nil)
    end
  end

  class SwarmSpec
    include JSON::Serializable

    @[JSON::Field(key: "Name")]
    property! name : String?

    @[JSON::Field(key: "Labels")]
    property! labels : Hash(String, String)?

    @[JSON::Field(key: "Orchestration")]
    property! orchestration : SwarmSpec::Orchestration?

    @[JSON::Field(key: "Raft")]
    property! raft : SwarmSpec::Raft?

    @[JSON::Field(key: "Dispatcher")]
    property! dispatcher : SwarmSpec::Dispatcher?

    @[JSON::Field(key: "CAConfig")]
    property! ca_config : SwarmSpec::CAConfig?

    @[JSON::Field(key: "EncryptionConfig")]
    property! encryption_config : SwarmSpec::EncryptionConfig?

    @[JSON::Field(key: "TaskDefaults")]
    property! task_defaults : SwarmSpec::TaskDefaults?

    def initialize(@name : String? = nil, @labels : Hash(String, String)? = nil, @orchestration : SwarmSpec::Orchestration? = nil, @raft : SwarmSpec::Raft? = nil, @dispatcher : SwarmSpec::Dispatcher? = nil, @ca_config : SwarmSpec::CAConfig? = nil, @encryption_config : SwarmSpec::EncryptionConfig? = nil, @task_defaults : SwarmSpec::TaskDefaults? = nil)
    end
  end

  class SwarmSpec::CAConfig
    include JSON::Serializable

    @[JSON::Field(key: "NodeCertExpiry")]
    property! node_cert_expiry : Int64?

    @[JSON::Field(key: "ExternalCAs")]
    property! external_c_as : Array(SwarmSpec::CAConfig::ExternalCAs)?

    @[JSON::Field(key: "SigningCACert")]
    property! signing_ca_cert : String?

    @[JSON::Field(key: "SigningCAKey")]
    property! signing_ca_key : String?

    @[JSON::Field(key: "ForceRotate")]
    property! force_rotate : UInt64?

    def initialize(@node_cert_expiry : Int64? = nil, @external_c_as : Array(SwarmSpec::CAConfig::ExternalCAs)? = nil, @signing_ca_cert : String? = nil, @signing_ca_key : String? = nil, @force_rotate : UInt64? = nil)
    end
  end

  class SwarmSpec::CAConfig::ExternalCAs
    include JSON::Serializable

    @[JSON::Field(key: "Protocol")]
    property! protocol : String?

    @[JSON::Field(key: "URL")]
    property! url : String?

    @[JSON::Field(key: "Options")]
    property! options : Hash(String, String)?

    @[JSON::Field(key: "CACert")]
    property! ca_cert : String?

    def initialize(@protocol : String? = nil, @url : String? = nil, @options : Hash(String, String)? = nil, @ca_cert : String? = nil)
    end
  end

  class SwarmSpec::Dispatcher
    include JSON::Serializable

    @[JSON::Field(key: "HeartbeatPeriod")]
    property! heartbeat_period : Int64?

    def initialize(@heartbeat_period : Int64? = nil)
    end
  end

  class SwarmSpec::EncryptionConfig
    include JSON::Serializable

    @[JSON::Field(key: "AutoLockManagers")]
    property! auto_lock_managers : Bool?

    def initialize(@auto_lock_managers : Bool? = nil)
    end
  end

  class SwarmSpec::Orchestration
    include JSON::Serializable

    @[JSON::Field(key: "TaskHistoryRetentionLimit")]
    property! task_history_retention_limit : Int64?

    def initialize(@task_history_retention_limit : Int64? = nil)
    end
  end

  class SwarmSpec::Raft
    include JSON::Serializable

    @[JSON::Field(key: "SnapshotInterval")]
    property! snapshot_interval : UInt64?

    @[JSON::Field(key: "KeepOldSnapshots")]
    property! keep_old_snapshots : UInt64?

    @[JSON::Field(key: "LogEntriesForSlowFollowers")]
    property! log_entries_for_slow_followers : UInt64?

    @[JSON::Field(key: "ElectionTick")]
    property! election_tick : Int64?

    @[JSON::Field(key: "HeartbeatTick")]
    property! heartbeat_tick : Int64?

    def initialize(@snapshot_interval : UInt64? = nil, @keep_old_snapshots : UInt64? = nil, @log_entries_for_slow_followers : UInt64? = nil, @election_tick : Int64? = nil, @heartbeat_tick : Int64? = nil)
    end
  end

  class SwarmSpec::TaskDefaults
    include JSON::Serializable

    @[JSON::Field(key: "LogDriver")]
    property! log_driver : SwarmSpec::TaskDefaults::LogDriver?

    def initialize(@log_driver : SwarmSpec::TaskDefaults::LogDriver? = nil)
    end
  end

  class SwarmSpec::TaskDefaults::LogDriver
    include JSON::Serializable

    @[JSON::Field(key: "Name")]
    property! name : String?

    @[JSON::Field(key: "Options")]
    property! options : Hash(String, String)?

    def initialize(@name : String? = nil, @options : Hash(String, String)? = nil)
    end
  end

  class SwarmUnlockRequest
    include JSON::Serializable

    @[JSON::Field(key: "UnlockKey")]
    property! unlock_key : String?

    def initialize(@unlock_key : String? = nil)
    end
  end

  class SystemAuthResponse
    include JSON::Serializable

    @[JSON::Field(key: "Status")]
    property! status : String

    @[JSON::Field(key: "IdentityToken")]
    property! identity_token : String

    def initialize(@status : String, @identity_token : String)
    end
  end

  class SystemDataUsageResponse
    include JSON::Serializable

    @[JSON::Field(key: "LayersSize")]
    property! layers_size : Int64?

    @[JSON::Field(key: "Images")]
    property! images : Array(ImageSummary)?

    @[JSON::Field(key: "Containers")]
    property! containers : Array(ContainerSummary)?

    @[JSON::Field(key: "Volumes")]
    property! volumes : Array(Volume)?

    @[JSON::Field(key: "BuildCache")]
    property! build_cache : Array(BuildCache)?

    def initialize(@layers_size : Int64? = nil, @images : Array(ImageSummary)? = nil, @containers : Array(ContainerSummary)? = nil, @volumes : Array(Volume)? = nil, @build_cache : Array(BuildCache)? = nil)
    end
  end

  class SystemInfo
    include JSON::Serializable

    @[JSON::Field(key: "ID")]
    property! id : String?

    @[JSON::Field(key: "Containers")]
    property! containers : Int64?

    @[JSON::Field(key: "ContainersRunning")]
    property! containers_running : Int64?

    @[JSON::Field(key: "ContainersPaused")]
    property! containers_paused : Int64?

    @[JSON::Field(key: "ContainersStopped")]
    property! containers_stopped : Int64?

    @[JSON::Field(key: "Images")]
    property! images : Int64?

    @[JSON::Field(key: "Driver")]
    property! driver : String?

    @[JSON::Field(key: "DriverStatus")]
    property! driver_status : Array(Array(String))?

    @[JSON::Field(key: "DockerRootDir")]
    property! docker_root_dir : String?

    @[JSON::Field(key: "SystemStatus")]
    property! system_status : Array(Array(String))?

    @[JSON::Field(key: "Plugins")]
    property! plugins : PluginsInfo?

    @[JSON::Field(key: "MemoryLimit")]
    property! memory_limit : Bool?

    @[JSON::Field(key: "SwapLimit")]
    property! swap_limit : Bool?

    @[JSON::Field(key: "KernelMemory")]
    property! kernel_memory : Bool?

    @[JSON::Field(key: "KernelMemoryTCP")]
    property! kernel_memory_tcp : Bool?

    @[JSON::Field(key: "CpuCfsPeriod")]
    property! cpu_cfs_period : Bool?

    @[JSON::Field(key: "CpuCfsQuota")]
    property! cpu_cfs_quota : Bool?

    @[JSON::Field(key: "CPUShares")]
    property! cpu_shares : Bool?

    @[JSON::Field(key: "CPUSet")]
    property! cpu_set : Bool?

    @[JSON::Field(key: "PidsLimit")]
    property! pids_limit : Bool?

    @[JSON::Field(key: "OomKillDisable")]
    property! oom_kill_disable : Bool?

    @[JSON::Field(key: "IPv4Forwarding")]
    property! ipv4_forwarding : Bool?

    @[JSON::Field(key: "BridgeNfIptables")]
    property! bridge_nf_iptables : Bool?

    @[JSON::Field(key: "BridgeNfIp6tables")]
    property! bridge_nf_ip6tables : Bool?

    @[JSON::Field(key: "Debug")]
    property! debug : Bool?

    @[JSON::Field(key: "NFd")]
    property! n_fd : Int64?

    @[JSON::Field(key: "NGoroutines")]
    property! n_goroutines : Int64?

    @[JSON::Field(key: "SystemTime")]
    property! system_time : String?

    @[JSON::Field(key: "LoggingDriver")]
    property! logging_driver : String?

    @[JSON::Field(key: "CgroupDriver")]
    property! cgroup_driver : String?

    @[JSON::Field(key: "NEventsListener")]
    property! n_events_listener : Int64?

    @[JSON::Field(key: "KernelVersion")]
    property! kernel_version : String?

    @[JSON::Field(key: "OperatingSystem")]
    property! operating_system : String?

    @[JSON::Field(key: "OSType")]
    property! os_type : String?

    @[JSON::Field(key: "Architecture")]
    property! architecture : String?

    @[JSON::Field(key: "NCPU")]
    property! ncpu : Int64?

    @[JSON::Field(key: "MemTotal")]
    property! mem_total : Int64?

    @[JSON::Field(key: "IndexServerAddress")]
    property! index_server_address : String?

    @[JSON::Field(key: "RegistryConfig")]
    property! registry_config : RegistryServiceConfig?

    @[JSON::Field(key: "GenericResources")]
    property! generic_resources : GenericResources?

    @[JSON::Field(key: "HttpProxy")]
    property! http_proxy : String?

    @[JSON::Field(key: "HttpsProxy")]
    property! https_proxy : String?

    @[JSON::Field(key: "NoProxy")]
    property! no_proxy : String?

    @[JSON::Field(key: "Name")]
    property! name : String?

    @[JSON::Field(key: "Labels")]
    property! labels : Array(String)?

    @[JSON::Field(key: "ExperimentalBuild")]
    property! experimental_build : Bool?

    @[JSON::Field(key: "ServerVersion")]
    property! server_version : String?

    @[JSON::Field(key: "ClusterStore")]
    property! cluster_store : String?

    @[JSON::Field(key: "ClusterAdvertise")]
    property! cluster_advertise : String?

    @[JSON::Field(key: "Runtimes")]
    property! runtimes : Hash(String, Runtime)?

    @[JSON::Field(key: "DefaultRuntime")]
    property! default_runtime : String?

    @[JSON::Field(key: "Swarm")]
    property! swarm : SwarmInfo?

    @[JSON::Field(key: "LiveRestoreEnabled")]
    property! live_restore_enabled : Bool?

    @[JSON::Field(key: "Isolation")]
    property! isolation : String?

    @[JSON::Field(key: "InitBinary")]
    property! init_binary : String?

    @[JSON::Field(key: "ContainerdCommit")]
    property! containerd_commit : Commit?

    @[JSON::Field(key: "RuncCommit")]
    property! runc_commit : Commit?

    @[JSON::Field(key: "InitCommit")]
    property! init_commit : Commit?

    @[JSON::Field(key: "SecurityOptions")]
    property! security_options : Array(String)?

    @[JSON::Field(key: "ProductLicense")]
    property! product_license : String?

    @[JSON::Field(key: "Warnings")]
    property! warnings : Array(String)?

    def initialize(@id : String? = nil, @containers : Int64? = nil, @containers_running : Int64? = nil, @containers_paused : Int64? = nil, @containers_stopped : Int64? = nil, @images : Int64? = nil, @driver : String? = nil, @driver_status : Array(Array(String))? = nil, @docker_root_dir : String? = nil, @system_status : Array(Array(String))? = nil, @plugins : PluginsInfo? = nil, @memory_limit : Bool? = nil, @swap_limit : Bool? = nil, @kernel_memory : Bool? = nil, @kernel_memory_tcp : Bool? = nil, @cpu_cfs_period : Bool? = nil, @cpu_cfs_quota : Bool? = nil, @cpu_shares : Bool? = nil, @cpu_set : Bool? = nil, @pids_limit : Bool? = nil, @oom_kill_disable : Bool? = nil, @ipv4_forwarding : Bool? = nil, @bridge_nf_iptables : Bool? = nil, @bridge_nf_ip6tables : Bool? = nil, @debug : Bool? = nil, @n_fd : Int64? = nil, @n_goroutines : Int64? = nil, @system_time : String? = nil, @logging_driver : String? = nil, @cgroup_driver : String? = nil, @n_events_listener : Int64? = nil, @kernel_version : String? = nil, @operating_system : String? = nil, @os_type : String? = nil, @architecture : String? = nil, @ncpu : Int64? = nil, @mem_total : Int64? = nil, @index_server_address : String? = nil, @registry_config : RegistryServiceConfig? = nil, @generic_resources : GenericResources? = nil, @http_proxy : String? = nil, @https_proxy : String? = nil, @no_proxy : String? = nil, @name : String? = nil, @labels : Array(String)? = nil, @experimental_build : Bool? = nil, @server_version : String? = nil, @cluster_store : String? = nil, @cluster_advertise : String? = nil, @runtimes : Hash(String, Runtime)? = nil, @default_runtime : String? = nil, @swarm : SwarmInfo? = nil, @live_restore_enabled : Bool? = nil, @isolation : String? = nil, @init_binary : String? = nil, @containerd_commit : Commit? = nil, @runc_commit : Commit? = nil, @init_commit : Commit? = nil, @security_options : Array(String)? = nil, @product_license : String? = nil, @warnings : Array(String)? = nil)
    end
  end

  class SystemVersion
    include JSON::Serializable

    @[JSON::Field(key: "Platform")]
    property! platform : SystemVersion::Platform?

    @[JSON::Field(key: "Components")]
    property! components : Array(SystemVersion::Components)?

    @[JSON::Field(key: "Version")]
    property! version : String?

    @[JSON::Field(key: "ApiVersion")]
    property! api_version : String?

    @[JSON::Field(key: "MinAPIVersion")]
    property! min_api_version : String?

    @[JSON::Field(key: "GitCommit")]
    property! git_commit : String?

    @[JSON::Field(key: "GoVersion")]
    property! go_version : String?

    @[JSON::Field(key: "Os")]
    property! os : String?

    @[JSON::Field(key: "Arch")]
    property! arch : String?

    @[JSON::Field(key: "KernelVersion")]
    property! kernel_version : String?

    @[JSON::Field(key: "Experimental")]
    property! experimental : Bool?

    @[JSON::Field(key: "BuildTime")]
    property! build_time : String?

    def initialize(@platform : SystemVersion::Platform? = nil, @components : Array(SystemVersion::Components)? = nil, @version : String? = nil, @api_version : String? = nil, @min_api_version : String? = nil, @git_commit : String? = nil, @go_version : String? = nil, @os : String? = nil, @arch : String? = nil, @kernel_version : String? = nil, @experimental : Bool? = nil, @build_time : String? = nil)
    end
  end

  class SystemVersion::Components
    include JSON::Serializable

    @[JSON::Field(key: "Name")]
    property! name : String

    @[JSON::Field(key: "Version")]
    property! version : String

    @[JSON::Field(key: "Details")]
    property! details : SystemVersion::Components::Details?

    def initialize(@name : String, @version : String, @details : SystemVersion::Components::Details? = nil)
    end
  end

  class SystemVersion::Components::Details
    include JSON::Serializable
  end

  class SystemVersion::Platform
    include JSON::Serializable

    @[JSON::Field(key: "Name")]
    property! name : String

    def initialize(@name : String)
    end
  end

  class TLSInfo
    include JSON::Serializable

    @[JSON::Field(key: "TrustRoot")]
    property! trust_root : String?

    @[JSON::Field(key: "CertIssuerSubject")]
    property! cert_issuer_subject : String?

    @[JSON::Field(key: "CertIssuerPublicKey")]
    property! cert_issuer_public_key : String?

    def initialize(@trust_root : String? = nil, @cert_issuer_subject : String? = nil, @cert_issuer_public_key : String? = nil)
    end
  end

  class Task
    include JSON::Serializable

    @[JSON::Field(key: "ID")]
    property! id : String?

    @[JSON::Field(key: "Version")]
    property! version : ObjectVersion?

    @[JSON::Field(key: "CreatedAt")]
    property! created_at : Time?

    @[JSON::Field(key: "UpdatedAt")]
    property! updated_at : Time?

    @[JSON::Field(key: "Name")]
    property! name : String?

    @[JSON::Field(key: "Labels")]
    property! labels : Hash(String, String)?

    @[JSON::Field(key: "Spec")]
    property! spec : TaskSpec?

    @[JSON::Field(key: "ServiceID")]
    property! service_id : String?

    @[JSON::Field(key: "Slot")]
    property! slot : Int64?

    @[JSON::Field(key: "NodeID")]
    property! node_id : String?

    @[JSON::Field(key: "AssignedGenericResources")]
    property! assigned_generic_resources : GenericResources?

    @[JSON::Field(key: "Status")]
    property! status : Task::Status?

    @[JSON::Field(key: "DesiredState")]
    property! desired_state : TaskState?

    def initialize(@id : String? = nil, @version : ObjectVersion? = nil, @created_at : Time? = nil, @updated_at : Time? = nil, @name : String? = nil, @labels : Hash(String, String)? = nil, @spec : TaskSpec? = nil, @service_id : String? = nil, @slot : Int64? = nil, @node_id : String? = nil, @assigned_generic_resources : GenericResources? = nil, @status : Task::Status? = nil, @desired_state : TaskState? = nil)
    end
  end

  class Task::Status
    include JSON::Serializable

    @[JSON::Field(key: "Timestamp")]
    property! timestamp : Time?

    @[JSON::Field(key: "State")]
    property! state : TaskState?

    @[JSON::Field(key: "Message")]
    property! message : String?

    @[JSON::Field(key: "Err")]
    property! err : String?

    @[JSON::Field(key: "ContainerStatus")]
    property! container_status : Task::Status::ContainerStatus?

    def initialize(@timestamp : Time? = nil, @state : TaskState? = nil, @message : String? = nil, @err : String? = nil, @container_status : Task::Status::ContainerStatus? = nil)
    end
  end

  class Task::Status::ContainerStatus
    include JSON::Serializable

    @[JSON::Field(key: "ContainerID")]
    property! container_id : String?

    @[JSON::Field(key: "PID")]
    property! pid : Int64?

    @[JSON::Field(key: "ExitCode")]
    property! exit_code : Int64?

    def initialize(@container_id : String? = nil, @pid : Int64? = nil, @exit_code : Int64? = nil)
    end
  end

  class TaskSpec
    include JSON::Serializable

    @[JSON::Field(key: "PluginSpec")]
    property! plugin_spec : TaskSpec::PluginSpec?

    @[JSON::Field(key: "ContainerSpec")]
    property! container_spec : TaskSpec::ContainerSpec?

    @[JSON::Field(key: "NetworkAttachmentSpec")]
    property! network_attachment_spec : TaskSpec::NetworkAttachmentSpec?

    @[JSON::Field(key: "Resources")]
    property! resources : TaskSpec::Resources?

    @[JSON::Field(key: "RestartPolicy")]
    property! restart_policy : TaskSpec::RestartPolicy?

    @[JSON::Field(key: "Placement")]
    property! placement : TaskSpec::Placement?

    @[JSON::Field(key: "ForceUpdate")]
    property! force_update : Int64?

    @[JSON::Field(key: "Runtime")]
    property! runtime : String?

    @[JSON::Field(key: "Networks")]
    property! networks : Array(NetworkAttachmentConfig)?

    @[JSON::Field(key: "LogDriver")]
    property! log_driver : TaskSpec::LogDriver?

    def initialize(@plugin_spec : TaskSpec::PluginSpec? = nil, @container_spec : TaskSpec::ContainerSpec? = nil, @network_attachment_spec : TaskSpec::NetworkAttachmentSpec? = nil, @resources : TaskSpec::Resources? = nil, @restart_policy : TaskSpec::RestartPolicy? = nil, @placement : TaskSpec::Placement? = nil, @force_update : Int64? = nil, @runtime : String? = nil, @networks : Array(NetworkAttachmentConfig)? = nil, @log_driver : TaskSpec::LogDriver? = nil)
    end
  end

  class TaskSpec::ContainerSpec
    include JSON::Serializable

    @[JSON::Field(key: "Image")]
    property! image : String?

    @[JSON::Field(key: "Labels")]
    property! labels : Hash(String, String)?

    @[JSON::Field(key: "Command")]
    property! command : Array(String)?

    @[JSON::Field(key: "Args")]
    property! args : Array(String)?

    @[JSON::Field(key: "Hostname")]
    property! hostname : String?

    @[JSON::Field(key: "Env")]
    property! env : Array(String)?

    @[JSON::Field(key: "Dir")]
    property! dir : String?

    @[JSON::Field(key: "User")]
    property! user : String?

    @[JSON::Field(key: "Groups")]
    property! groups : Array(String)?

    @[JSON::Field(key: "Privileges")]
    property! privileges : TaskSpec::ContainerSpec::Privileges?

    @[JSON::Field(key: "TTY")]
    property! tty : Bool?

    @[JSON::Field(key: "OpenStdin")]
    property! open_stdin : Bool?

    @[JSON::Field(key: "ReadOnly")]
    property! read_only : Bool?

    @[JSON::Field(key: "Mounts")]
    property! mounts : Array(Mount)?

    @[JSON::Field(key: "StopSignal")]
    property! stop_signal : String?

    @[JSON::Field(key: "StopGracePeriod")]
    property! stop_grace_period : Int64?

    @[JSON::Field(key: "HealthCheck")]
    property! health_check : HealthConfig?

    @[JSON::Field(key: "Hosts")]
    property! hosts : Array(String)?

    @[JSON::Field(key: "DNSConfig")]
    property! dns_config : TaskSpec::ContainerSpec::DNSConfig?

    @[JSON::Field(key: "Secrets")]
    property! secrets : Array(TaskSpec::ContainerSpec::Secrets)?

    @[JSON::Field(key: "Configs")]
    property! configs : Array(TaskSpec::ContainerSpec::Configs)?

    @[JSON::Field(key: "Isolation")]
    property! isolation : String?

    @[JSON::Field(key: "Init")]
    property! init : Bool?

    @[JSON::Field(key: "Sysctls")]
    property! sysctls : Hash(String, String)?

    def initialize(@image : String? = nil, @labels : Hash(String, String)? = nil, @command : Array(String)? = nil, @args : Array(String)? = nil, @hostname : String? = nil, @env : Array(String)? = nil, @dir : String? = nil, @user : String? = nil, @groups : Array(String)? = nil, @privileges : TaskSpec::ContainerSpec::Privileges? = nil, @tty : Bool? = nil, @open_stdin : Bool? = nil, @read_only : Bool? = nil, @mounts : Array(Mount)? = nil, @stop_signal : String? = nil, @stop_grace_period : Int64? = nil, @health_check : HealthConfig? = nil, @hosts : Array(String)? = nil, @dns_config : TaskSpec::ContainerSpec::DNSConfig? = nil, @secrets : Array(TaskSpec::ContainerSpec::Secrets)? = nil, @configs : Array(TaskSpec::ContainerSpec::Configs)? = nil, @isolation : String? = nil, @init : Bool? = nil, @sysctls : Hash(String, String)? = nil)
    end
  end

  class TaskSpec::ContainerSpec::Configs
    include JSON::Serializable

    @[JSON::Field(key: "File")]
    property! file : TaskSpec::ContainerSpec::Configs::File?

    @[JSON::Field(key: "Runtime")]
    property! runtime : TaskSpec::ContainerSpec::Configs::Runtime?

    @[JSON::Field(key: "ConfigID")]
    property! config_id : String?

    @[JSON::Field(key: "ConfigName")]
    property! config_name : String?

    def initialize(@file : TaskSpec::ContainerSpec::Configs::File? = nil, @runtime : TaskSpec::ContainerSpec::Configs::Runtime? = nil, @config_id : String? = nil, @config_name : String? = nil)
    end
  end

  class TaskSpec::ContainerSpec::Configs::File
    include JSON::Serializable

    @[JSON::Field(key: "Name")]
    property! name : String?

    @[JSON::Field(key: "UID")]
    property! uid : String?

    @[JSON::Field(key: "GID")]
    property! gid : String?

    @[JSON::Field(key: "Mode")]
    property! mode : UInt32?

    def initialize(@name : String? = nil, @uid : String? = nil, @gid : String? = nil, @mode : UInt32? = nil)
    end
  end

  class TaskSpec::ContainerSpec::Configs::Runtime
    include JSON::Serializable
  end

  class TaskSpec::ContainerSpec::DNSConfig
    include JSON::Serializable

    @[JSON::Field(key: "Nameservers")]
    property! nameservers : Array(String)?

    @[JSON::Field(key: "Search")]
    property! search : Array(String)?

    @[JSON::Field(key: "Options")]
    property! options : Array(String)?

    def initialize(@nameservers : Array(String)? = nil, @search : Array(String)? = nil, @options : Array(String)? = nil)
    end
  end

  class TaskSpec::ContainerSpec::Privileges
    include JSON::Serializable

    @[JSON::Field(key: "CredentialSpec")]
    property! credential_spec : TaskSpec::ContainerSpec::Privileges::CredentialSpec?

    @[JSON::Field(key: "SELinuxContext")]
    property! se_linux_context : TaskSpec::ContainerSpec::Privileges::SELinuxContext?

    def initialize(@credential_spec : TaskSpec::ContainerSpec::Privileges::CredentialSpec? = nil, @se_linux_context : TaskSpec::ContainerSpec::Privileges::SELinuxContext? = nil)
    end
  end

  class TaskSpec::ContainerSpec::Privileges::CredentialSpec
    include JSON::Serializable

    @[JSON::Field(key: "Config")]
    property! config : String?

    @[JSON::Field(key: "File")]
    property! file : String?

    @[JSON::Field(key: "Registry")]
    property! registry : String?

    def initialize(@config : String? = nil, @file : String? = nil, @registry : String? = nil)
    end
  end

  class TaskSpec::ContainerSpec::Privileges::SELinuxContext
    include JSON::Serializable

    @[JSON::Field(key: "Disable")]
    property! disable : Bool?

    @[JSON::Field(key: "User")]
    property! user : String?

    @[JSON::Field(key: "Role")]
    property! role : String?

    @[JSON::Field(key: "Type")]
    property! type : String?

    @[JSON::Field(key: "Level")]
    property! level : String?

    def initialize(@disable : Bool? = nil, @user : String? = nil, @role : String? = nil, @type : String? = nil, @level : String? = nil)
    end
  end

  class TaskSpec::ContainerSpec::Secrets
    include JSON::Serializable

    @[JSON::Field(key: "File")]
    property! file : TaskSpec::ContainerSpec::Secrets::File?

    @[JSON::Field(key: "SecretID")]
    property! secret_id : String?

    @[JSON::Field(key: "SecretName")]
    property! secret_name : String?

    def initialize(@file : TaskSpec::ContainerSpec::Secrets::File? = nil, @secret_id : String? = nil, @secret_name : String? = nil)
    end
  end

  class TaskSpec::ContainerSpec::Secrets::File
    include JSON::Serializable

    @[JSON::Field(key: "Name")]
    property! name : String?

    @[JSON::Field(key: "UID")]
    property! uid : String?

    @[JSON::Field(key: "GID")]
    property! gid : String?

    @[JSON::Field(key: "Mode")]
    property! mode : UInt32?

    def initialize(@name : String? = nil, @uid : String? = nil, @gid : String? = nil, @mode : UInt32? = nil)
    end
  end

  class TaskSpec::LogDriver
    include JSON::Serializable

    @[JSON::Field(key: "Name")]
    property! name : String?

    @[JSON::Field(key: "Options")]
    property! options : Hash(String, String)?

    def initialize(@name : String? = nil, @options : Hash(String, String)? = nil)
    end
  end

  class TaskSpec::NetworkAttachmentSpec
    include JSON::Serializable

    @[JSON::Field(key: "ContainerID")]
    property! container_id : String?

    def initialize(@container_id : String? = nil)
    end
  end

  class TaskSpec::Placement
    include JSON::Serializable

    @[JSON::Field(key: "Constraints")]
    property! constraints : Array(String)?

    @[JSON::Field(key: "Preferences")]
    property! preferences : Array(TaskSpec::Placement::Preferences)?

    @[JSON::Field(key: "MaxReplicas")]
    property! max_replicas : Int64?

    @[JSON::Field(key: "Platforms")]
    property! platforms : Array(Platform)?

    def initialize(@constraints : Array(String)? = nil, @preferences : Array(TaskSpec::Placement::Preferences)? = nil, @max_replicas : Int64? = nil, @platforms : Array(Platform)? = nil)
    end
  end

  class TaskSpec::Placement::Preferences
    include JSON::Serializable

    @[JSON::Field(key: "Spread")]
    property! spread : TaskSpec::Placement::Preferences::Spread?

    def initialize(@spread : TaskSpec::Placement::Preferences::Spread? = nil)
    end
  end

  class TaskSpec::Placement::Preferences::Spread
    include JSON::Serializable

    @[JSON::Field(key: "SpreadDescriptor")]
    property! spread_descriptor : String?

    def initialize(@spread_descriptor : String? = nil)
    end
  end

  class TaskSpec::PluginSpec
    include JSON::Serializable

    @[JSON::Field(key: "Name")]
    property! name : String?

    @[JSON::Field(key: "Remote")]
    property! remote : String?

    @[JSON::Field(key: "Disabled")]
    property! disabled : Bool?

    @[JSON::Field(key: "PluginPrivilege")]
    property! plugin_privilege : Array(PluginPrivilege)?

    def initialize(@name : String? = nil, @remote : String? = nil, @disabled : Bool? = nil, @plugin_privilege : Array(PluginPrivilege)? = nil)
    end
  end

  class TaskSpec::Resources
    include JSON::Serializable

    @[JSON::Field(key: "Limits")]
    property! limits : ResourceObject?

    @[JSON::Field(key: "Reservations")]
    property! reservations : ResourceObject?

    def initialize(@limits : ResourceObject? = nil, @reservations : ResourceObject? = nil)
    end
  end

  class TaskSpec::RestartPolicy
    include JSON::Serializable

    @[JSON::Field(key: "Condition")]
    property! condition : String?

    @[JSON::Field(key: "Delay")]
    property! delay : Int64?

    @[JSON::Field(key: "MaxAttempts")]
    property! max_attempts : Int64?

    @[JSON::Field(key: "Window")]
    property! window : Int64?

    def initialize(@condition : String? = nil, @delay : Int64? = nil, @max_attempts : Int64? = nil, @window : Int64? = nil)
    end
  end

  class ThrottleDevice
    include JSON::Serializable

    @[JSON::Field(key: "Path")]
    property! path : String?

    @[JSON::Field(key: "Rate")]
    property! rate : Int64?

    def initialize(@path : String? = nil, @rate : Int64? = nil)
    end
  end

  class UnlockKeyResponse
    include JSON::Serializable

    @[JSON::Field(key: "UnlockKey")]
    property! unlock_key : String?

    def initialize(@unlock_key : String? = nil)
    end
  end

  class Volume
    include JSON::Serializable

    @[JSON::Field(key: "Name")]
    property! name : String

    @[JSON::Field(key: "Driver")]
    property! driver : String

    @[JSON::Field(key: "Mountpoint")]
    property! mountpoint : String

    @[JSON::Field(key: "CreatedAt")]
    property! created_at : Time?

    @[JSON::Field(key: "Status")]
    property! status : Hash(String, JSON::Any)?

    @[JSON::Field(key: "Labels")]
    property! labels : Hash(String, String)

    @[JSON::Field(key: "Scope")]
    property! scope : String

    @[JSON::Field(key: "Options")]
    property! options : Hash(String, String)

    @[JSON::Field(key: "UsageData")]
    property! usage_data : Volume::UsageData?

    def initialize(@name : String, @driver : String, @mountpoint : String, @labels : Hash(String, String), @scope : String, @options : Hash(String, String), @created_at : Time? = nil, @status : Hash(String, JSON::Any)? = nil, @usage_data : Volume::UsageData? = nil)
    end
  end

  class Volume::UsageData
    include JSON::Serializable

    @[JSON::Field(key: "Size")]
    property! size : Int64

    @[JSON::Field(key: "RefCount")]
    property! ref_count : Int64

    def initialize(@size : Int64, @ref_count : Int64)
    end
  end

  class VolumeCreateOptions
    include JSON::Serializable

    @[JSON::Field(key: "Name")]
    property! name : String

    @[JSON::Field(key: "Driver")]
    property! driver : String

    @[JSON::Field(key: "DriverOpts")]
    property! driver_opts : Hash(String, String)?

    @[JSON::Field(key: "Labels")]
    property! labels : Hash(String, String)?

    def initialize(@name : String, @driver : String, @driver_opts : Hash(String, String)? = nil, @labels : Hash(String, String)? = nil)
    end
  end

  class VolumeListResponse
    include JSON::Serializable

    @[JSON::Field(key: "Volumes")]
    property! volumes : Array(Volume)?

    @[JSON::Field(key: "Warnings")]
    property! warnings : Array(String)?

    def initialize(@volumes : Array(Volume)? = nil, @warnings : Array(String)? = nil)
    end
  end

  class VolumePruneResponse
    include JSON::Serializable

    @[JSON::Field(key: "VolumesDeleted")]
    property! volumes_deleted : Array(String)?

    @[JSON::Field(key: "SpaceReclaimed")]
    property! space_reclaimed : Int64?

    def initialize(@volumes_deleted : Array(String)? = nil, @space_reclaimed : Int64? = nil)
    end
  end

  class Client
    def container_list(*, all : Bool? = nil, limit : Int64? = nil, size : Bool? = nil, filters : String? = nil) : Array(ContainerSummary)
      query = Params.build do |qs|
        qs.add("all", all) unless all.nil?
        qs.add("limit", limit) unless limit.nil?
        qs.add("size", size) unless size.nil?
        qs.add("filters", filters) unless filters.nil?
      end
      http_client.get("/v1.40/containers/json?#{query}") do |response|
        case response.status_code
        when 200
          Array(ContainerSummary).from_json(response.body_io)
        when 400, 500
          raise ErrorResponse.from_json(response.body_io)
        else
          unexpected_response(response)
        end
      end
    end

    def container_create(body : ContainerCreate, *, name : String? = nil) : ContainerCreateResponse
      query = Params.build do |qs|
        qs.add("name", name) unless name.nil?
      end
      headers = HTTP::Headers{"Content-Type" => "application/json"}
      http_client.post("/v1.40/containers/create?#{query}", headers: headers, body: body.to_json) do |response|
        case response.status_code
        when 201
          ContainerCreateResponse.from_json(response.body_io)
        when 400, 404, 409, 500
          raise ErrorResponse.from_json(response.body_io)
        else
          unexpected_response(response)
        end
      end
    end

    def container_inspect?(id : String, *, size : Bool? = nil) : ContainerInspectResponse?
      query = Params.build do |qs|
        qs.add("size", size) unless size.nil?
      end
      http_client.get("/v1.40/containers/#{URI.encode_path_segment(id)}/json?#{query}") do |response|
        case response.status_code
        when 200
          ContainerInspectResponse.from_json(response.body_io)
        when 404
        when 500
          raise ErrorResponse.from_json(response.body_io)
        else
          unexpected_response(response)
        end
      end
    end

    def container_top?(id : String, *, ps_args : String? = nil) : ContainerTopResponse?
      query = Params.build do |qs|
        qs.add("ps_args", ps_args) unless ps_args.nil?
      end
      http_client.get("/v1.40/containers/#{URI.encode_path_segment(id)}/top?#{query}") do |response|
        case response.status_code
        when 200
          ContainerTopResponse.from_json(response.body_io)
        when 404
        when 500
          raise ErrorResponse.from_json(response.body_io)
        else
          unexpected_response(response)
        end
      end
    end

    def container_logs?(id : String, *, follow : Bool? = nil, stdout : Bool? = nil, stderr : Bool? = nil, since : Int64? = nil, _until : Int64? = nil, timestamps : Bool? = nil, tail : String? = nil) : Bytes?
      query = Params.build do |qs|
        qs.add("follow", follow) unless follow.nil?
        qs.add("stdout", stdout) unless stdout.nil?
        qs.add("stderr", stderr) unless stderr.nil?
        qs.add("since", since) unless since.nil?
        qs.add("until", _until) unless _until.nil?
        qs.add("timestamps", timestamps) unless timestamps.nil?
        qs.add("tail", tail) unless tail.nil?
      end
      http_client.get("/v1.40/containers/#{URI.encode_path_segment(id)}/logs?#{query}") do |response|
        case response.status_code
        when 200
          yield response.body_io
        when 404
        when 500
          raise ErrorResponse.from_json(response.body_io)
        else
          unexpected_response(response)
        end
      end
    end

    def container_changes?(id : String) : Array(ContainerChangeResponseItem)?
      http_client.get("/v1.40/containers/#{URI.encode_path_segment(id)}/changes") do |response|
        case response.status_code
        when 200
          Array(ContainerChangeResponseItem).from_json(response.body_io)
        when 404
        when 500
          raise ErrorResponse.from_json(response.body_io)
        else
          unexpected_response(response)
        end
      end
    end

    def container_export?(id : String) : Nil
      http_client.get("/v1.40/containers/#{URI.encode_path_segment(id)}/export") do |response|
        case response.status_code
        when 200, 404
        when 500
          raise ErrorResponse.from_json(response.body_io)
        else
          unexpected_response(response)
        end
      end
    end

    def container_stats?(id : String, *, stream : Bool? = nil) : JSON::Any?
      query = Params.build do |qs|
        qs.add("stream", stream) unless stream.nil?
      end
      http_client.get("/v1.40/containers/#{URI.encode_path_segment(id)}/stats?#{query}") do |response|
        case response.status_code
        when 200
          JSON::Any.from_json(response.body_io)
        when 404
        when 500
          raise ErrorResponse.from_json(response.body_io)
        else
          unexpected_response(response)
        end
      end
    end

    def container_resize(id : String, *, h : Int64? = nil, w : Int64? = nil) : Nil
      query = Params.build do |qs|
        qs.add("h", h) unless h.nil?
        qs.add("w", w) unless w.nil?
      end
      http_client.post("/v1.40/containers/#{URI.encode_path_segment(id)}/resize?#{query}") do |response|
        case response.status_code
        when 200
        when 404, 500
          raise ErrorResponse.from_json(response.body_io)
        else
          unexpected_response(response)
        end
      end
    end

    def container_start(id : String, *, detach_keys : String? = nil) : Nil
      query = Params.build do |qs|
        qs.add("detachKeys", detach_keys) unless detach_keys.nil?
      end
      http_client.post("/v1.40/containers/#{URI.encode_path_segment(id)}/start?#{query}") do |response|
        case response.status_code
        when 204, 304
        when 404, 500
          raise ErrorResponse.from_json(response.body_io)
        else
          unexpected_response(response)
        end
      end
    end

    def container_stop(id : String, *, t : Int64? = nil) : Nil
      query = Params.build do |qs|
        qs.add("t", t) unless t.nil?
      end
      http_client.post("/v1.40/containers/#{URI.encode_path_segment(id)}/stop?#{query}") do |response|
        case response.status_code
        when 204, 304
        when 404, 500
          raise ErrorResponse.from_json(response.body_io)
        else
          unexpected_response(response)
        end
      end
    end

    def container_restart(id : String, *, t : Int64? = nil) : Nil
      query = Params.build do |qs|
        qs.add("t", t) unless t.nil?
      end
      http_client.post("/v1.40/containers/#{URI.encode_path_segment(id)}/restart?#{query}") do |response|
        case response.status_code
        when 204
        when 404, 500
          raise ErrorResponse.from_json(response.body_io)
        else
          unexpected_response(response)
        end
      end
    end

    def container_kill(id : String, *, signal : String? = nil) : Nil
      query = Params.build do |qs|
        qs.add("signal", signal) unless signal.nil?
      end
      http_client.post("/v1.40/containers/#{URI.encode_path_segment(id)}/kill?#{query}") do |response|
        case response.status_code
        when 204
        when 404, 409, 500
          raise ErrorResponse.from_json(response.body_io)
        else
          unexpected_response(response)
        end
      end
    end

    def container_update(id : String, update : ContainerUpdate) : ContainerUpdateResponse
      headers = HTTP::Headers{"Content-Type" => "application/json"}
      http_client.post("/v1.40/containers/#{URI.encode_path_segment(id)}/update", headers: headers, body: update.to_json) do |response|
        case response.status_code
        when 200
          ContainerUpdateResponse.from_json(response.body_io)
        when 404, 500
          raise ErrorResponse.from_json(response.body_io)
        else
          unexpected_response(response)
        end
      end
    end

    def container_rename(id : String, *, name : String) : Nil
      query = Params.build do |qs|
        qs.add("name", name)
      end
      http_client.post("/v1.40/containers/#{URI.encode_path_segment(id)}/rename?#{query}") do |response|
        case response.status_code
        when 204
        when 404, 409, 500
          raise ErrorResponse.from_json(response.body_io)
        else
          unexpected_response(response)
        end
      end
    end

    def container_pause(id : String) : Nil
      http_client.post("/v1.40/containers/#{URI.encode_path_segment(id)}/pause") do |response|
        case response.status_code
        when 204
        when 404, 500
          raise ErrorResponse.from_json(response.body_io)
        else
          unexpected_response(response)
        end
      end
    end

    def container_unpause(id : String) : Nil
      http_client.post("/v1.40/containers/#{URI.encode_path_segment(id)}/unpause") do |response|
        case response.status_code
        when 204
        when 404, 500
          raise ErrorResponse.from_json(response.body_io)
        else
          unexpected_response(response)
        end
      end
    end

    def container_attach(id : String, *, detach_keys : String? = nil, logs : Bool? = nil, stream : Bool? = nil, stdin : Bool? = nil, stdout : Bool? = nil, stderr : Bool? = nil) : Nil
      query = Params.build do |qs|
        qs.add("detachKeys", detach_keys) unless detach_keys.nil?
        qs.add("logs", logs) unless logs.nil?
        qs.add("stream", stream) unless stream.nil?
        qs.add("stdin", stdin) unless stdin.nil?
        qs.add("stdout", stdout) unless stdout.nil?
        qs.add("stderr", stderr) unless stderr.nil?
      end
      http_client.post("/v1.40/containers/#{URI.encode_path_segment(id)}/attach?#{query}") do |response|
        case response.status_code
        when 101, 200
        when 400, 404, 500
          raise ErrorResponse.from_json(response.body_io)
        else
          unexpected_response(response)
        end
      end
    end

    def container_attach_websocket?(id : String, *, detach_keys : String? = nil, logs : Bool? = nil, stream : Bool? = nil) : Nil
      query = Params.build do |qs|
        qs.add("detachKeys", detach_keys) unless detach_keys.nil?
        qs.add("logs", logs) unless logs.nil?
        qs.add("stream", stream) unless stream.nil?
      end
      http_client.get("/v1.40/containers/#{URI.encode_path_segment(id)}/attach/ws?#{query}") do |response|
        case response.status_code
        when 101, 200, 404
        when 400, 500
          raise ErrorResponse.from_json(response.body_io)
        else
          unexpected_response(response)
        end
      end
    end

    def container_wait(id : String, *, condition : String? = nil) : ContainerWaitResponse
      query = Params.build do |qs|
        qs.add("condition", condition) unless condition.nil?
      end
      http_client.post("/v1.40/containers/#{URI.encode_path_segment(id)}/wait?#{query}") do |response|
        case response.status_code
        when 200
          ContainerWaitResponse.from_json(response.body_io)
        when 400, 404, 500
          raise ErrorResponse.from_json(response.body_io)
        else
          unexpected_response(response)
        end
      end
    end

    def container_delete(id : String, *, v : Bool? = nil, force : Bool? = nil, link : Bool? = nil) : Nil
      query = Params.build do |qs|
        qs.add("v", v) unless v.nil?
        qs.add("force", force) unless force.nil?
        qs.add("link", link) unless link.nil?
      end
      http_client.delete("/v1.40/containers/#{URI.encode_path_segment(id)}?#{query}") do |response|
        case response.status_code
        when 204
        when 400, 404, 409, 500
          raise ErrorResponse.from_json(response.body_io)
        else
          unexpected_response(response)
        end
      end
    end

    def container_archive?(id : String, *, path : String) : Nil
      query = Params.build do |qs|
        qs.add("path", path)
      end
      http_client.get("/v1.40/containers/#{URI.encode_path_segment(id)}/archive?#{query}") do |response|
        case response.status_code
        when 200, 404
        when 400, 500
          raise ErrorResponse.from_json(response.body_io)
        else
          unexpected_response(response)
        end
      end
    end

    def put_container_archive(id : String, input_stream : Bytes, *, path : String, no_overwrite_dir_non_dir : String? = nil, copy_uidgid : String? = nil) : Nil
      query = Params.build do |qs|
        qs.add("path", path)
        qs.add("noOverwriteDirNonDir", no_overwrite_dir_non_dir) unless no_overwrite_dir_non_dir.nil?
        qs.add("copyUIDGID", copy_uidgid) unless copy_uidgid.nil?
      end
      headers = HTTP::Headers{"Content-Type" => "application/json"}
      http_client.put("/v1.40/containers/#{URI.encode_path_segment(id)}/archive?#{query}", headers: headers, body: input_stream.to_json) do |response|
        case response.status_code
        when 200
        when 400, 403, 404, 500
          raise ErrorResponse.from_json(response.body_io)
        else
          unexpected_response(response)
        end
      end
    end

    def container_archive_info(id : String, *, path : String) : Nil
      query = Params.build do |qs|
        qs.add("path", path)
      end
      http_client.head("/v1.40/containers/#{URI.encode_path_segment(id)}/archive?#{query}") do |response|
        case response.status_code
        when 200
        when 400, 404, 500
          raise ErrorResponse.from_json(response.body_io)
        else
          unexpected_response(response)
        end
      end
    end

    def container_prune(*, filters : String? = nil) : ContainerPruneResponse
      query = Params.build do |qs|
        qs.add("filters", filters) unless filters.nil?
      end
      http_client.post("/v1.40/containers/prune?#{query}") do |response|
        case response.status_code
        when 200
          ContainerPruneResponse.from_json(response.body_io)
        when 500
          raise ErrorResponse.from_json(response.body_io)
        else
          unexpected_response(response)
        end
      end
    end

    def image_list(*, all : Bool? = nil, filters : String? = nil, digests : Bool? = nil) : Array(ImageSummary)
      query = Params.build do |qs|
        qs.add("all", all) unless all.nil?
        qs.add("filters", filters) unless filters.nil?
        qs.add("digests", digests) unless digests.nil?
      end
      http_client.get("/v1.40/images/json?#{query}") do |response|
        case response.status_code
        when 200
          Array(ImageSummary).from_json(response.body_io)
        when 500
          raise ErrorResponse.from_json(response.body_io)
        else
          unexpected_response(response)
        end
      end
    end

    def image_build(input_stream : Bytes? = nil, *, dockerfile : String? = nil, t : String? = nil, extrahosts : String? = nil, remote : String? = nil, q : Bool? = nil, nocache : Bool? = nil, cachefrom : String? = nil, pull : String? = nil, rm : Bool? = nil, forcerm : Bool? = nil, memory : Int64? = nil, memswap : Int64? = nil, cpushares : Int64? = nil, cpusetcpus : String? = nil, cpuperiod : Int64? = nil, cpuquota : Int64? = nil, buildargs : String? = nil, shmsize : Int64? = nil, squash : Bool? = nil, labels : String? = nil, networkmode : String? = nil, platform : String? = nil, target : String? = nil, outputs : String? = nil) : Nil
      query = Params.build do |qs|
        qs.add("dockerfile", dockerfile) unless dockerfile.nil?
        qs.add("t", t) unless t.nil?
        qs.add("extrahosts", extrahosts) unless extrahosts.nil?
        qs.add("remote", remote) unless remote.nil?
        qs.add("q", q) unless q.nil?
        qs.add("nocache", nocache) unless nocache.nil?
        qs.add("cachefrom", cachefrom) unless cachefrom.nil?
        qs.add("pull", pull) unless pull.nil?
        qs.add("rm", rm) unless rm.nil?
        qs.add("forcerm", forcerm) unless forcerm.nil?
        qs.add("memory", memory) unless memory.nil?
        qs.add("memswap", memswap) unless memswap.nil?
        qs.add("cpushares", cpushares) unless cpushares.nil?
        qs.add("cpusetcpus", cpusetcpus) unless cpusetcpus.nil?
        qs.add("cpuperiod", cpuperiod) unless cpuperiod.nil?
        qs.add("cpuquota", cpuquota) unless cpuquota.nil?
        qs.add("buildargs", buildargs) unless buildargs.nil?
        qs.add("shmsize", shmsize) unless shmsize.nil?
        qs.add("squash", squash) unless squash.nil?
        qs.add("labels", labels) unless labels.nil?
        qs.add("networkmode", networkmode) unless networkmode.nil?
        qs.add("platform", platform) unless platform.nil?
        qs.add("target", target) unless target.nil?
        qs.add("outputs", outputs) unless outputs.nil?
      end
      headers = HTTP::Headers{"Content-Type" => "application/json"}
      http_client.post("/v1.40/build?#{query}", headers: headers, body: input_stream.to_json) do |response|
        case response.status_code
        when 200
        when 400, 500
          raise ErrorResponse.from_json(response.body_io)
        else
          unexpected_response(response)
        end
      end
    end

    def build_prune(*, keep_storage : Int64? = nil, all : Bool? = nil, filters : String? = nil) : BuildPruneResponse
      query = Params.build do |qs|
        qs.add("keep-storage", keep_storage) unless keep_storage.nil?
        qs.add("all", all) unless all.nil?
        qs.add("filters", filters) unless filters.nil?
      end
      http_client.post("/v1.40/build/prune?#{query}") do |response|
        case response.status_code
        when 200
          BuildPruneResponse.from_json(response.body_io)
        when 500
          raise ErrorResponse.from_json(response.body_io)
        else
          unexpected_response(response)
        end
      end
    end

    def image_create(input_image : String? = nil, *, from_image : String? = nil, from_src : String? = nil, repo : String? = nil, tag : String? = nil, message : String? = nil, changes : Array(String)? = nil, platform : String? = nil) : Nil
      query = Params.build do |qs|
        qs.add("fromImage", from_image) unless from_image.nil?
        qs.add("fromSrc", from_src) unless from_src.nil?
        qs.add("repo", repo) unless repo.nil?
        qs.add("tag", tag) unless tag.nil?
        qs.add("message", message) unless message.nil?
        qs.add("changes", changes) unless changes.nil?
        qs.add("platform", platform) unless platform.nil?
      end
      headers = HTTP::Headers{"Content-Type" => "application/json"}
      http_client.post("/v1.40/images/create?#{query}", headers: headers, body: input_image.to_json) do |response|
        case response.status_code
        when 200
        when 404, 500
          raise ErrorResponse.from_json(response.body_io)
        else
          unexpected_response(response)
        end
      end
    end

    def image_inspect?(name : String) : ImageInspect?
      http_client.get("/v1.40/images/#{URI.encode_path_segment(name)}/json") do |response|
        case response.status_code
        when 200
          ImageInspect.from_json(response.body_io)
        when 404
        when 500
          raise ErrorResponse.from_json(response.body_io)
        else
          unexpected_response(response)
        end
      end
    end

    def image_history?(name : String) : Array(HistoryResponseItem)?
      http_client.get("/v1.40/images/#{URI.encode_path_segment(name)}/history") do |response|
        case response.status_code
        when 200
          Array(HistoryResponseItem).from_json(response.body_io)
        when 404
        when 500
          raise ErrorResponse.from_json(response.body_io)
        else
          unexpected_response(response)
        end
      end
    end

    def image_push(name : String, *, tag : String? = nil) : Nil
      query = Params.build do |qs|
        qs.add("tag", tag) unless tag.nil?
      end
      http_client.post("/v1.40/images/#{URI.encode_path_segment(name)}/push?#{query}") do |response|
        case response.status_code
        when 200
        when 404, 500
          raise ErrorResponse.from_json(response.body_io)
        else
          unexpected_response(response)
        end
      end
    end

    def image_tag(name : String, *, repo : String? = nil, tag : String? = nil) : Nil
      query = Params.build do |qs|
        qs.add("repo", repo) unless repo.nil?
        qs.add("tag", tag) unless tag.nil?
      end
      http_client.post("/v1.40/images/#{URI.encode_path_segment(name)}/tag?#{query}") do |response|
        case response.status_code
        when 201
        when 400, 404, 409, 500
          raise ErrorResponse.from_json(response.body_io)
        else
          unexpected_response(response)
        end
      end
    end

    def image_delete(name : String, *, force : Bool? = nil, noprune : Bool? = nil) : Array(ImageDeleteResponseItem)
      query = Params.build do |qs|
        qs.add("force", force) unless force.nil?
        qs.add("noprune", noprune) unless noprune.nil?
      end
      http_client.delete("/v1.40/images/#{URI.encode_path_segment(name)}?#{query}") do |response|
        case response.status_code
        when 200
          Array(ImageDeleteResponseItem).from_json(response.body_io)
        when 404, 409, 500
          raise ErrorResponse.from_json(response.body_io)
        else
          unexpected_response(response)
        end
      end
    end

    def image_search(*, term : String, limit : Int64? = nil, filters : String? = nil) : Array(ImageSearchResponseItem)
      query = Params.build do |qs|
        qs.add("term", term)
        qs.add("limit", limit) unless limit.nil?
        qs.add("filters", filters) unless filters.nil?
      end
      http_client.get("/v1.40/images/search?#{query}") do |response|
        case response.status_code
        when 200
          Array(ImageSearchResponseItem).from_json(response.body_io)
        when 500
          raise ErrorResponse.from_json(response.body_io)
        else
          unexpected_response(response)
        end
      end
    end

    def image_prune(*, filters : String? = nil) : ImagePruneResponse
      query = Params.build do |qs|
        qs.add("filters", filters) unless filters.nil?
      end
      http_client.post("/v1.40/images/prune?#{query}") do |response|
        case response.status_code
        when 200
          ImagePruneResponse.from_json(response.body_io)
        when 500
          raise ErrorResponse.from_json(response.body_io)
        else
          unexpected_response(response)
        end
      end
    end

    def system_auth(auth_config : AuthConfig? = nil) : SystemAuthResponse
      headers = HTTP::Headers{"Content-Type" => "application/json"}
      http_client.post("/v1.40/auth", headers: headers, body: auth_config.to_json) do |response|
        case response.status_code
        when 200
          SystemAuthResponse.from_json(response.body_io)
        when 204
        when 401, 500
          raise ErrorResponse.from_json(response.body_io)
        else
          unexpected_response(response)
        end
      end
    end

    def system_info() : SystemInfo
      http_client.get("/v1.40/info") do |response|
        case response.status_code
        when 200
          SystemInfo.from_json(response.body_io)
        when 500
          raise ErrorResponse.from_json(response.body_io)
        else
          unexpected_response(response)
        end
      end
    end

    def system_version() : SystemVersion
      http_client.get("/v1.40/version") do |response|
        case response.status_code
        when 200
          SystemVersion.from_json(response.body_io)
        when 500
          raise ErrorResponse.from_json(response.body_io)
        else
          unexpected_response(response)
        end
      end
    end

    def system_ping() : String
      http_client.get("/v1.40/_ping") do |response|
        case response.status_code
        when 200
          String.from_json(response.body_io)
        when 500
          raise ErrorResponse.from_json(response.body_io)
        else
          unexpected_response(response)
        end
      end
    end

    def system_ping_head() : String
      http_client.head("/v1.40/_ping") do |response|
        case response.status_code
        when 200
          String.from_json(response.body_io)
        when 500
          raise ErrorResponse.from_json(response.body_io)
        else
          unexpected_response(response)
        end
      end
    end

    def image_commit(container_config : ContainerConfig? = nil, *, container : String? = nil, repo : String? = nil, tag : String? = nil, comment : String? = nil, author : String? = nil, pause : Bool? = nil, changes : String? = nil) : IdResponse
      query = Params.build do |qs|
        qs.add("container", container) unless container.nil?
        qs.add("repo", repo) unless repo.nil?
        qs.add("tag", tag) unless tag.nil?
        qs.add("comment", comment) unless comment.nil?
        qs.add("author", author) unless author.nil?
        qs.add("pause", pause) unless pause.nil?
        qs.add("changes", changes) unless changes.nil?
      end
      headers = HTTP::Headers{"Content-Type" => "application/json"}
      http_client.post("/v1.40/commit?#{query}", headers: headers, body: container_config.to_json) do |response|
        case response.status_code
        when 201
          IdResponse.from_json(response.body_io)
        when 404, 500
          raise ErrorResponse.from_json(response.body_io)
        else
          unexpected_response(response)
        end
      end
    end

    def system_events(*, since : String? = nil, _until : String? = nil, filters : String? = nil) : EventMessage
      query = Params.build do |qs|
        qs.add("since", since) unless since.nil?
        qs.add("until", _until) unless _until.nil?
        qs.add("filters", filters) unless filters.nil?
      end
      http_client.get("/v1.40/events?#{query}") do |response|
        case response.status_code
        when 200
          EventMessage.from_json(response.body_io)
        when 400, 500
          raise ErrorResponse.from_json(response.body_io)
        else
          unexpected_response(response)
        end
      end
    end

    def system_data_usage() : SystemDataUsageResponse
      http_client.get("/v1.40/system/df") do |response|
        case response.status_code
        when 200
          SystemDataUsageResponse.from_json(response.body_io)
        when 500
          raise ErrorResponse.from_json(response.body_io)
        else
          unexpected_response(response)
        end
      end
    end

    def image_get(name : String) : Bytes
      http_client.get("/v1.40/images/#{URI.encode_path_segment(name)}/get") do |response|
        case response.status_code
        when 200
          yield response.body_io
        when 500
          raise ErrorResponse.from_json(response.body_io)
        else
          unexpected_response(response)
        end
      end
    end

    def image_get_all(*, names : Array(String)? = nil) : Bytes
      query = Params.build do |qs|
        qs.add("names", names) unless names.nil?
      end
      http_client.get("/v1.40/images/get?#{query}") do |response|
        case response.status_code
        when 200
          yield response.body_io
        when 500
          raise ErrorResponse.from_json(response.body_io)
        else
          unexpected_response(response)
        end
      end
    end

    def image_load(images_tarball : Bytes? = nil, *, quiet : Bool? = nil) : Nil
      query = Params.build do |qs|
        qs.add("quiet", quiet) unless quiet.nil?
      end
      headers = HTTP::Headers{"Content-Type" => "application/json"}
      http_client.post("/v1.40/images/load?#{query}", headers: headers, body: images_tarball.to_json) do |response|
        case response.status_code
        when 200
        when 500
          raise ErrorResponse.from_json(response.body_io)
        else
          unexpected_response(response)
        end
      end
    end

    def container_exec(id : String, exec_config : ExecConfig) : IdResponse
      headers = HTTP::Headers{"Content-Type" => "application/json"}
      http_client.post("/v1.40/containers/#{URI.encode_path_segment(id)}/exec", headers: headers, body: exec_config.to_json) do |response|
        case response.status_code
        when 201
          IdResponse.from_json(response.body_io)
        when 404, 409, 500
          raise ErrorResponse.from_json(response.body_io)
        else
          unexpected_response(response)
        end
      end
    end

    def exec_start(id : String, exec_start_config : ExecStartConfig? = nil) : Nil
      headers = HTTP::Headers{"Content-Type" => "application/json"}
      http_client.post("/v1.40/exec/#{URI.encode_path_segment(id)}/start", headers: headers, body: exec_start_config.to_json) do |response|
        case response.status_code
        when 200
        when 404, 409
          raise ErrorResponse.from_json(response.body_io)
        else
          unexpected_response(response)
        end
      end
    end

    def exec_resize(id : String, *, h : Int64? = nil, w : Int64? = nil) : Nil
      query = Params.build do |qs|
        qs.add("h", h) unless h.nil?
        qs.add("w", w) unless w.nil?
      end
      http_client.post("/v1.40/exec/#{URI.encode_path_segment(id)}/resize?#{query}") do |response|
        case response.status_code
        when 200
        when 400, 404, 500
          raise ErrorResponse.from_json(response.body_io)
        else
          unexpected_response(response)
        end
      end
    end

    def exec_inspect?(id : String) : ExecInspectResponse?
      http_client.get("/v1.40/exec/#{URI.encode_path_segment(id)}/json") do |response|
        case response.status_code
        when 200
          ExecInspectResponse.from_json(response.body_io)
        when 404
        when 500
          raise ErrorResponse.from_json(response.body_io)
        else
          unexpected_response(response)
        end
      end
    end

    def volume_list(*, filters : String? = nil) : VolumeListResponse
      query = Params.build do |qs|
        qs.add("filters", filters) unless filters.nil?
      end
      http_client.get("/v1.40/volumes?#{query}") do |response|
        case response.status_code
        when 200
          VolumeListResponse.from_json(response.body_io)
        when 500
          raise ErrorResponse.from_json(response.body_io)
        else
          unexpected_response(response)
        end
      end
    end

    def volume_create(volume_config : VolumeCreateOptions) : Volume
      headers = HTTP::Headers{"Content-Type" => "application/json"}
      http_client.post("/v1.40/volumes/create", headers: headers, body: volume_config.to_json) do |response|
        case response.status_code
        when 201
          Volume.from_json(response.body_io)
        when 500
          raise ErrorResponse.from_json(response.body_io)
        else
          unexpected_response(response)
        end
      end
    end

    def volume_inspect?(name : String) : Volume?
      http_client.get("/v1.40/volumes/#{URI.encode_path_segment(name)}") do |response|
        case response.status_code
        when 200
          Volume.from_json(response.body_io)
        when 404
        when 500
          raise ErrorResponse.from_json(response.body_io)
        else
          unexpected_response(response)
        end
      end
    end

    def volume_delete(name : String, *, force : Bool? = nil) : Nil
      query = Params.build do |qs|
        qs.add("force", force) unless force.nil?
      end
      http_client.delete("/v1.40/volumes/#{URI.encode_path_segment(name)}?#{query}") do |response|
        case response.status_code
        when 204
        when 404, 409, 500
          raise ErrorResponse.from_json(response.body_io)
        else
          unexpected_response(response)
        end
      end
    end

    def volume_prune(*, filters : String? = nil) : VolumePruneResponse
      query = Params.build do |qs|
        qs.add("filters", filters) unless filters.nil?
      end
      http_client.post("/v1.40/volumes/prune?#{query}") do |response|
        case response.status_code
        when 200
          VolumePruneResponse.from_json(response.body_io)
        when 500
          raise ErrorResponse.from_json(response.body_io)
        else
          unexpected_response(response)
        end
      end
    end

    def network_list(*, filters : String? = nil) : Array(Network)
      query = Params.build do |qs|
        qs.add("filters", filters) unless filters.nil?
      end
      http_client.get("/v1.40/networks?#{query}") do |response|
        case response.status_code
        when 200
          Array(Network).from_json(response.body_io)
        when 500
          raise ErrorResponse.from_json(response.body_io)
        else
          unexpected_response(response)
        end
      end
    end

    def network_inspect?(id : String, *, verbose : Bool? = nil, scope : String? = nil) : Network?
      query = Params.build do |qs|
        qs.add("verbose", verbose) unless verbose.nil?
        qs.add("scope", scope) unless scope.nil?
      end
      http_client.get("/v1.40/networks/#{URI.encode_path_segment(id)}?#{query}") do |response|
        case response.status_code
        when 200
          Network.from_json(response.body_io)
        when 404
        when 500
          raise ErrorResponse.from_json(response.body_io)
        else
          unexpected_response(response)
        end
      end
    end

    def network_delete(id : String) : Nil
      http_client.delete("/v1.40/networks/#{URI.encode_path_segment(id)}") do |response|
        case response.status_code
        when 204
        when 403, 404, 500
          raise ErrorResponse.from_json(response.body_io)
        else
          unexpected_response(response)
        end
      end
    end

    def network_create(network_config : NetworkCreateRequest) : NetworkCreateResponse
      headers = HTTP::Headers{"Content-Type" => "application/json"}
      http_client.post("/v1.40/networks/create", headers: headers, body: network_config.to_json) do |response|
        case response.status_code
        when 201
          NetworkCreateResponse.from_json(response.body_io)
        when 403, 404, 500
          raise ErrorResponse.from_json(response.body_io)
        else
          unexpected_response(response)
        end
      end
    end

    def network_connect(id : String, container : NetworkConnectRequest) : Nil
      headers = HTTP::Headers{"Content-Type" => "application/json"}
      http_client.post("/v1.40/networks/#{URI.encode_path_segment(id)}/connect", headers: headers, body: container.to_json) do |response|
        case response.status_code
        when 200
        when 403, 404, 500
          raise ErrorResponse.from_json(response.body_io)
        else
          unexpected_response(response)
        end
      end
    end

    def network_disconnect(id : String, container : NetworkDisconnectRequest) : Nil
      headers = HTTP::Headers{"Content-Type" => "application/json"}
      http_client.post("/v1.40/networks/#{URI.encode_path_segment(id)}/disconnect", headers: headers, body: container.to_json) do |response|
        case response.status_code
        when 200
        when 403, 404, 500
          raise ErrorResponse.from_json(response.body_io)
        else
          unexpected_response(response)
        end
      end
    end

    def network_prune(*, filters : String? = nil) : NetworkPruneResponse
      query = Params.build do |qs|
        qs.add("filters", filters) unless filters.nil?
      end
      http_client.post("/v1.40/networks/prune?#{query}") do |response|
        case response.status_code
        when 200
          NetworkPruneResponse.from_json(response.body_io)
        when 500
          raise ErrorResponse.from_json(response.body_io)
        else
          unexpected_response(response)
        end
      end
    end

    def plugin_list(*, filters : String? = nil) : Array(Plugin)
      query = Params.build do |qs|
        qs.add("filters", filters) unless filters.nil?
      end
      http_client.get("/v1.40/plugins?#{query}") do |response|
        case response.status_code
        when 200
          Array(Plugin).from_json(response.body_io)
        when 500
          raise ErrorResponse.from_json(response.body_io)
        else
          unexpected_response(response)
        end
      end
    end

    def get_plugin_privileges(*, remote : String) : Array(PluginPrivilege)
      query = Params.build do |qs|
        qs.add("remote", remote)
      end
      http_client.get("/v1.40/plugins/privileges?#{query}") do |response|
        case response.status_code
        when 200
          Array(PluginPrivilege).from_json(response.body_io)
        when 500
          raise ErrorResponse.from_json(response.body_io)
        else
          unexpected_response(response)
        end
      end
    end

    def plugin_pull(body : Array(PluginPrivilege)? = nil, *, remote : String, name : String? = nil) : Nil
      query = Params.build do |qs|
        qs.add("remote", remote)
        qs.add("name", name) unless name.nil?
      end
      headers = HTTP::Headers{"Content-Type" => "application/json"}
      http_client.post("/v1.40/plugins/pull?#{query}", headers: headers, body: body.to_json) do |response|
        case response.status_code
        when 204
        when 500
          raise ErrorResponse.from_json(response.body_io)
        else
          unexpected_response(response)
        end
      end
    end

    def plugin_inspect?(name : String) : Plugin?
      http_client.get("/v1.40/plugins/#{URI.encode_path_segment(name)}/json") do |response|
        case response.status_code
        when 200
          Plugin.from_json(response.body_io)
        when 404
        when 500
          raise ErrorResponse.from_json(response.body_io)
        else
          unexpected_response(response)
        end
      end
    end

    def plugin_delete(name : String, *, force : Bool? = nil) : Plugin
      query = Params.build do |qs|
        qs.add("force", force) unless force.nil?
      end
      http_client.delete("/v1.40/plugins/#{URI.encode_path_segment(name)}?#{query}") do |response|
        case response.status_code
        when 200
          Plugin.from_json(response.body_io)
        when 404, 500
          raise ErrorResponse.from_json(response.body_io)
        else
          unexpected_response(response)
        end
      end
    end

    def plugin_enable(name : String, *, timeout : Int64? = nil) : Nil
      query = Params.build do |qs|
        qs.add("timeout", timeout) unless timeout.nil?
      end
      http_client.post("/v1.40/plugins/#{URI.encode_path_segment(name)}/enable?#{query}") do |response|
        case response.status_code
        when 200
        when 404, 500
          raise ErrorResponse.from_json(response.body_io)
        else
          unexpected_response(response)
        end
      end
    end

    def plugin_disable(name : String) : Nil
      http_client.post("/v1.40/plugins/#{URI.encode_path_segment(name)}/disable") do |response|
        case response.status_code
        when 200
        when 404, 500
          raise ErrorResponse.from_json(response.body_io)
        else
          unexpected_response(response)
        end
      end
    end

    def plugin_upgrade(name : String, body : Array(PluginPrivilege)? = nil, *, remote : String) : Nil
      query = Params.build do |qs|
        qs.add("remote", remote)
      end
      headers = HTTP::Headers{"Content-Type" => "application/json"}
      http_client.post("/v1.40/plugins/#{URI.encode_path_segment(name)}/upgrade?#{query}", headers: headers, body: body.to_json) do |response|
        case response.status_code
        when 204
        when 404, 500
          raise ErrorResponse.from_json(response.body_io)
        else
          unexpected_response(response)
        end
      end
    end

    def plugin_create(tar_context : Bytes? = nil, *, name : String) : Nil
      query = Params.build do |qs|
        qs.add("name", name)
      end
      headers = HTTP::Headers{"Content-Type" => "application/json"}
      http_client.post("/v1.40/plugins/create?#{query}", headers: headers, body: tar_context.to_json) do |response|
        case response.status_code
        when 204
        when 500
          raise ErrorResponse.from_json(response.body_io)
        else
          unexpected_response(response)
        end
      end
    end

    def plugin_push(name : String) : Nil
      http_client.post("/v1.40/plugins/#{URI.encode_path_segment(name)}/push") do |response|
        case response.status_code
        when 200
        when 404, 500
          raise ErrorResponse.from_json(response.body_io)
        else
          unexpected_response(response)
        end
      end
    end

    def plugin_set(name : String, body : Array(String)? = nil) : Nil
      headers = HTTP::Headers{"Content-Type" => "application/json"}
      http_client.post("/v1.40/plugins/#{URI.encode_path_segment(name)}/set", headers: headers, body: body.to_json) do |response|
        case response.status_code
        when 204
        when 404, 500
          raise ErrorResponse.from_json(response.body_io)
        else
          unexpected_response(response)
        end
      end
    end

    def node_list(*, filters : String? = nil) : Array(Node)
      query = Params.build do |qs|
        qs.add("filters", filters) unless filters.nil?
      end
      http_client.get("/v1.40/nodes?#{query}") do |response|
        case response.status_code
        when 200
          Array(Node).from_json(response.body_io)
        when 500, 503
          raise ErrorResponse.from_json(response.body_io)
        else
          unexpected_response(response)
        end
      end
    end

    def node_inspect?(id : String) : Node?
      http_client.get("/v1.40/nodes/#{URI.encode_path_segment(id)}") do |response|
        case response.status_code
        when 200
          Node.from_json(response.body_io)
        when 404
        when 500, 503
          raise ErrorResponse.from_json(response.body_io)
        else
          unexpected_response(response)
        end
      end
    end

    def node_delete(id : String, *, force : Bool? = nil) : Nil
      query = Params.build do |qs|
        qs.add("force", force) unless force.nil?
      end
      http_client.delete("/v1.40/nodes/#{URI.encode_path_segment(id)}?#{query}") do |response|
        case response.status_code
        when 200
        when 404, 500, 503
          raise ErrorResponse.from_json(response.body_io)
        else
          unexpected_response(response)
        end
      end
    end

    def node_update(id : String, body : NodeSpec? = nil, *, version : Int64) : Nil
      query = Params.build do |qs|
        qs.add("version", version)
      end
      headers = HTTP::Headers{"Content-Type" => "application/json"}
      http_client.post("/v1.40/nodes/#{URI.encode_path_segment(id)}/update?#{query}", headers: headers, body: body.to_json) do |response|
        case response.status_code
        when 200
        when 400, 404, 500, 503
          raise ErrorResponse.from_json(response.body_io)
        else
          unexpected_response(response)
        end
      end
    end

    def swarm_inspect?() : Swarm?
      http_client.get("/v1.40/swarm") do |response|
        case response.status_code
        when 200
          Swarm.from_json(response.body_io)
        when 404
        when 500, 503
          raise ErrorResponse.from_json(response.body_io)
        else
          unexpected_response(response)
        end
      end
    end

    def swarm_init(body : SwarmInitRequest) : String
      headers = HTTP::Headers{"Content-Type" => "application/json"}
      http_client.post("/v1.40/swarm/init", headers: headers, body: body.to_json) do |response|
        case response.status_code
        when 200
          String.from_json(response.body_io)
        when 400, 500, 503
          raise ErrorResponse.from_json(response.body_io)
        else
          unexpected_response(response)
        end
      end
    end

    def swarm_join(body : SwarmJoinRequest) : Nil
      headers = HTTP::Headers{"Content-Type" => "application/json"}
      http_client.post("/v1.40/swarm/join", headers: headers, body: body.to_json) do |response|
        case response.status_code
        when 200
        when 400, 500, 503
          raise ErrorResponse.from_json(response.body_io)
        else
          unexpected_response(response)
        end
      end
    end

    def swarm_leave(*, force : Bool? = nil) : Nil
      query = Params.build do |qs|
        qs.add("force", force) unless force.nil?
      end
      http_client.post("/v1.40/swarm/leave?#{query}") do |response|
        case response.status_code
        when 200
        when 500, 503
          raise ErrorResponse.from_json(response.body_io)
        else
          unexpected_response(response)
        end
      end
    end

    def swarm_update(body : SwarmSpec, *, version : Int64, rotate_worker_token : Bool? = nil, rotate_manager_token : Bool? = nil, rotate_manager_unlock_key : Bool? = nil) : Nil
      query = Params.build do |qs|
        qs.add("version", version)
        qs.add("rotateWorkerToken", rotate_worker_token) unless rotate_worker_token.nil?
        qs.add("rotateManagerToken", rotate_manager_token) unless rotate_manager_token.nil?
        qs.add("rotateManagerUnlockKey", rotate_manager_unlock_key) unless rotate_manager_unlock_key.nil?
      end
      headers = HTTP::Headers{"Content-Type" => "application/json"}
      http_client.post("/v1.40/swarm/update?#{query}", headers: headers, body: body.to_json) do |response|
        case response.status_code
        when 200
        when 400, 500, 503
          raise ErrorResponse.from_json(response.body_io)
        else
          unexpected_response(response)
        end
      end
    end

    def swarm_unlockkey() : UnlockKeyResponse
      http_client.get("/v1.40/swarm/unlockkey") do |response|
        case response.status_code
        when 200
          UnlockKeyResponse.from_json(response.body_io)
        when 500, 503
          raise ErrorResponse.from_json(response.body_io)
        else
          unexpected_response(response)
        end
      end
    end

    def swarm_unlock(body : SwarmUnlockRequest) : Nil
      headers = HTTP::Headers{"Content-Type" => "application/json"}
      http_client.post("/v1.40/swarm/unlock", headers: headers, body: body.to_json) do |response|
        case response.status_code
        when 200
        when 500, 503
          raise ErrorResponse.from_json(response.body_io)
        else
          unexpected_response(response)
        end
      end
    end

    def service_list(*, filters : String? = nil) : Array(Service)
      query = Params.build do |qs|
        qs.add("filters", filters) unless filters.nil?
      end
      http_client.get("/v1.40/services?#{query}") do |response|
        case response.status_code
        when 200
          Array(Service).from_json(response.body_io)
        when 500, 503
          raise ErrorResponse.from_json(response.body_io)
        else
          unexpected_response(response)
        end
      end
    end

    def service_create(body : ServiceCreate) : ServiceCreateResponse
      headers = HTTP::Headers{"Content-Type" => "application/json"}
      http_client.post("/v1.40/services/create", headers: headers, body: body.to_json) do |response|
        case response.status_code
        when 201
          ServiceCreateResponse.from_json(response.body_io)
        when 400, 403, 409, 500, 503
          raise ErrorResponse.from_json(response.body_io)
        else
          unexpected_response(response)
        end
      end
    end

    def service_inspect?(id : String, *, insert_defaults : Bool? = nil) : Service?
      query = Params.build do |qs|
        qs.add("insertDefaults", insert_defaults) unless insert_defaults.nil?
      end
      http_client.get("/v1.40/services/#{URI.encode_path_segment(id)}?#{query}") do |response|
        case response.status_code
        when 200
          Service.from_json(response.body_io)
        when 404
        when 500, 503
          raise ErrorResponse.from_json(response.body_io)
        else
          unexpected_response(response)
        end
      end
    end

    def service_delete(id : String) : Nil
      http_client.delete("/v1.40/services/#{URI.encode_path_segment(id)}") do |response|
        case response.status_code
        when 200
        when 404, 500, 503
          raise ErrorResponse.from_json(response.body_io)
        else
          unexpected_response(response)
        end
      end
    end

    def service_update(id : String, body : ServiceUpdate, *, version : Int64, registry_auth_from : String? = nil, rollback : String? = nil) : ServiceUpdateResponse
      query = Params.build do |qs|
        qs.add("version", version)
        qs.add("registryAuthFrom", registry_auth_from) unless registry_auth_from.nil?
        qs.add("rollback", rollback) unless rollback.nil?
      end
      headers = HTTP::Headers{"Content-Type" => "application/json"}
      http_client.post("/v1.40/services/#{URI.encode_path_segment(id)}/update?#{query}", headers: headers, body: body.to_json) do |response|
        case response.status_code
        when 200
          ServiceUpdateResponse.from_json(response.body_io)
        when 400, 404, 500, 503
          raise ErrorResponse.from_json(response.body_io)
        else
          unexpected_response(response)
        end
      end
    end

    def service_logs?(id : String, *, details : Bool? = nil, follow : Bool? = nil, stdout : Bool? = nil, stderr : Bool? = nil, since : Int64? = nil, timestamps : Bool? = nil, tail : String? = nil) : Bytes?
      query = Params.build do |qs|
        qs.add("details", details) unless details.nil?
        qs.add("follow", follow) unless follow.nil?
        qs.add("stdout", stdout) unless stdout.nil?
        qs.add("stderr", stderr) unless stderr.nil?
        qs.add("since", since) unless since.nil?
        qs.add("timestamps", timestamps) unless timestamps.nil?
        qs.add("tail", tail) unless tail.nil?
      end
      http_client.get("/v1.40/services/#{URI.encode_path_segment(id)}/logs?#{query}") do |response|
        case response.status_code
        when 200
          yield response.body_io
        when 404
        when 500, 503
          raise ErrorResponse.from_json(response.body_io)
        else
          unexpected_response(response)
        end
      end
    end

    def task_list(*, filters : String? = nil) : Array(Task)
      query = Params.build do |qs|
        qs.add("filters", filters) unless filters.nil?
      end
      http_client.get("/v1.40/tasks?#{query}") do |response|
        case response.status_code
        when 200
          Array(Task).from_json(response.body_io)
        when 500, 503
          raise ErrorResponse.from_json(response.body_io)
        else
          unexpected_response(response)
        end
      end
    end

    def task_inspect?(id : String) : Task?
      http_client.get("/v1.40/tasks/#{URI.encode_path_segment(id)}") do |response|
        case response.status_code
        when 200
          Task.from_json(response.body_io)
        when 404
        when 500, 503
          raise ErrorResponse.from_json(response.body_io)
        else
          unexpected_response(response)
        end
      end
    end

    def task_logs?(id : String, *, details : Bool? = nil, follow : Bool? = nil, stdout : Bool? = nil, stderr : Bool? = nil, since : Int64? = nil, timestamps : Bool? = nil, tail : String? = nil) : Bytes?
      query = Params.build do |qs|
        qs.add("details", details) unless details.nil?
        qs.add("follow", follow) unless follow.nil?
        qs.add("stdout", stdout) unless stdout.nil?
        qs.add("stderr", stderr) unless stderr.nil?
        qs.add("since", since) unless since.nil?
        qs.add("timestamps", timestamps) unless timestamps.nil?
        qs.add("tail", tail) unless tail.nil?
      end
      http_client.get("/v1.40/tasks/#{URI.encode_path_segment(id)}/logs?#{query}") do |response|
        case response.status_code
        when 200
          yield response.body_io
        when 404
        when 500, 503
          raise ErrorResponse.from_json(response.body_io)
        else
          unexpected_response(response)
        end
      end
    end

    def secret_list(*, filters : String? = nil) : Array(Secret)
      query = Params.build do |qs|
        qs.add("filters", filters) unless filters.nil?
      end
      http_client.get("/v1.40/secrets?#{query}") do |response|
        case response.status_code
        when 200
          Array(Secret).from_json(response.body_io)
        when 500, 503
          raise ErrorResponse.from_json(response.body_io)
        else
          unexpected_response(response)
        end
      end
    end

    def secret_create(body : SecretCreate? = nil) : IdResponse
      headers = HTTP::Headers{"Content-Type" => "application/json"}
      http_client.post("/v1.40/secrets/create", headers: headers, body: body.to_json) do |response|
        case response.status_code
        when 201
          IdResponse.from_json(response.body_io)
        when 409, 500, 503
          raise ErrorResponse.from_json(response.body_io)
        else
          unexpected_response(response)
        end
      end
    end

    def secret_inspect?(id : String) : Secret?
      http_client.get("/v1.40/secrets/#{URI.encode_path_segment(id)}") do |response|
        case response.status_code
        when 200
          Secret.from_json(response.body_io)
        when 404
        when 500, 503
          raise ErrorResponse.from_json(response.body_io)
        else
          unexpected_response(response)
        end
      end
    end

    def secret_delete(id : String) : Nil
      http_client.delete("/v1.40/secrets/#{URI.encode_path_segment(id)}") do |response|
        case response.status_code
        when 204
        when 404, 500, 503
          raise ErrorResponse.from_json(response.body_io)
        else
          unexpected_response(response)
        end
      end
    end

    def secret_update(id : String, body : SecretSpec? = nil, *, version : Int64) : Nil
      query = Params.build do |qs|
        qs.add("version", version)
      end
      headers = HTTP::Headers{"Content-Type" => "application/json"}
      http_client.post("/v1.40/secrets/#{URI.encode_path_segment(id)}/update?#{query}", headers: headers, body: body.to_json) do |response|
        case response.status_code
        when 200
        when 400, 404, 500, 503
          raise ErrorResponse.from_json(response.body_io)
        else
          unexpected_response(response)
        end
      end
    end

    def config_list(*, filters : String? = nil) : Array(Config)
      query = Params.build do |qs|
        qs.add("filters", filters) unless filters.nil?
      end
      http_client.get("/v1.40/configs?#{query}") do |response|
        case response.status_code
        when 200
          Array(Config).from_json(response.body_io)
        when 500, 503
          raise ErrorResponse.from_json(response.body_io)
        else
          unexpected_response(response)
        end
      end
    end

    def config_create(body : ConfigCreate? = nil) : IdResponse
      headers = HTTP::Headers{"Content-Type" => "application/json"}
      http_client.post("/v1.40/configs/create", headers: headers, body: body.to_json) do |response|
        case response.status_code
        when 201
          IdResponse.from_json(response.body_io)
        when 409, 500, 503
          raise ErrorResponse.from_json(response.body_io)
        else
          unexpected_response(response)
        end
      end
    end

    def config_inspect?(id : String) : Config?
      http_client.get("/v1.40/configs/#{URI.encode_path_segment(id)}") do |response|
        case response.status_code
        when 200
          Config.from_json(response.body_io)
        when 404
        when 500, 503
          raise ErrorResponse.from_json(response.body_io)
        else
          unexpected_response(response)
        end
      end
    end

    def config_delete(id : String) : Nil
      http_client.delete("/v1.40/configs/#{URI.encode_path_segment(id)}") do |response|
        case response.status_code
        when 204
        when 404, 500, 503
          raise ErrorResponse.from_json(response.body_io)
        else
          unexpected_response(response)
        end
      end
    end

    def config_update(id : String, body : ConfigSpec? = nil, *, version : Int64) : Nil
      query = Params.build do |qs|
        qs.add("version", version)
      end
      headers = HTTP::Headers{"Content-Type" => "application/json"}
      http_client.post("/v1.40/configs/#{URI.encode_path_segment(id)}/update?#{query}", headers: headers, body: body.to_json) do |response|
        case response.status_code
        when 200
        when 400, 404, 500, 503
          raise ErrorResponse.from_json(response.body_io)
        else
          unexpected_response(response)
        end
      end
    end

    def distribution_inspect(name : String) : DistributionInspect
      http_client.get("/v1.40/distribution/#{URI.encode_path_segment(name)}/json") do |response|
        case response.status_code
        when 200
          DistributionInspect.from_json(response.body_io)
        when 401, 500
          raise ErrorResponse.from_json(response.body_io)
        else
          unexpected_response(response)
        end
      end
    end

    def session() : Nil
      http_client.post("/v1.40/session") do |response|
        case response.status_code
        when 101
        when 400, 500
          raise ErrorResponse.from_json(response.body_io)
        else
          unexpected_response(response)
        end
      end
    end

  end
end
